[{"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/index.js":"1","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/reportWebVitals.js":"2","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/App.js":"3","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Sign/Sign.js":"4","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatRoom.js":"5","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/Login.js":"6","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRooms/ChatRooms.js":"7","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/cookie.js":"8","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatBar.js":"9","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Shop/Shop.js":"10"},{"size":505,"mtime":1650102695497,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1650102695497,"results":"13","hashOfConfig":"12"},{"size":1008,"mtime":1650261077011,"results":"14","hashOfConfig":"12"},{"size":3474,"mtime":1650265966669,"results":"15","hashOfConfig":"12"},{"size":24246,"mtime":1650265966672,"results":"16","hashOfConfig":"12"},{"size":2876,"mtime":1650249947303,"results":"17","hashOfConfig":"12"},{"size":7723,"mtime":1650265966670,"results":"18","hashOfConfig":"12"},{"size":658,"mtime":1650102695437,"results":"19","hashOfConfig":"12"},{"size":3001,"mtime":1650263046881,"results":"20","hashOfConfig":"12"},{"size":2939,"mtime":1650268588921,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1nmmsgo",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/index.js",[],["49","50"],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/reportWebVitals.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/App.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Sign/Sign.js",["51","52"],"import { Input, Button, message } from 'antd'\nimport React from 'react'\nimport { API } from '../../App'\nimport { setCookie } from '../Login/cookie'\n\nimport './Sign.css'\n\nvar Sign = () =>{\n    \n    var [Username, setUsername] = React.useState()\n    var [SignPassword, setSignPassword] = React.useState()\n    var [SignPasswordConfir, setSignPasswordConfir] = React.useState()\n\n    const sign = () =>{\n        if(SignPassword===SignPasswordConfir){\n            let bodydata = {\n                username: Username,\n                password: SignPassword,\n            }\n            setCookie(\"update\",new Date().toUTCString())\n            fetch(`/user/sign/`,{\n                method:'POST',\n                body: JSON.stringify(bodydata),\n            })\n            .then(response=>{\n                if (response.status===200) {\n                    message.success(\"Sussessfully Sign! Return Login pagr to Login\")\n                    setTimeout(() => {\n                        window.location.href=\"/login\"\n                    }, 1000);\n                }else if (response.status===403){\n                    message.warn(\"User Already Exist, Please Change Your Username\")\n                }else{\n                    message.warn(\"User already exists\") \n                }\n            })\n        }\n        else{\n            message.warn(\"Inconsistent Password!\")\n            setTimeout(() => {\n                window.location.reload()\n            }, 2000);\n        }\n    }\n\n    return(\n        <div className='Sign'>\n            <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                <div style={{\n                    \"fontSize\":\"calc(4vh + 25px)\", color:\"white\", fontFamily:\"Cochin\",\n                    marginTop:\"10vh\", fontFamily:\"Cochin\"\n                }}>Sign up</div>\n                <div>\n                    <form className='Sign-form'>\n                        <div className='Sign-form-username'>\n                            <div style={{textAlign:\"left\", fontFamily:\"Cochin\"}}>Username</div>\n                            <Input style={{\"height\":\"2rem\"}} id='username' type=\"text\" value={Username} onChange={e=>setUsername(e.target.value)}/>\n                        </div>\n                        <div className='Sign-form-password'>\n                            <div style={{textAlign:\"left\", fontFamily:\"Cochin\"}}>Password</div>\n                            <Input style={{\"height\":\"2rem\"}} id='password' type=\"password\" value={SignPassword} onChange={e=>setSignPassword(e.target.value)}/>\n                        </div>\n                        <div className='Sign-form-passwordConfir'>\n                            <div style={{textAlign:\"left\", fontFamily:\"Cochin\"}}>Confirm Password</div>\n                            <Input style={{\"height\":\"2rem\"}} id='passwordConfir' type=\"password\" value={SignPasswordConfir} onChange={e=>setSignPasswordConfir(e.target.value)}/>\n                        </div>\n                        <div className='Sign-form-submit'>\n                            <Button style={{cursor:\"pointer\", fontFamily:\"Cochin\"}} id='submit' type=\"button\" onClick={sign}>Sign up</Button>\n                        </div>\n                        <div className='Sign-Sign-in'>\n                            <a href=\"/login\" style={{color:\"blueviolet\", fontFamily:\"Cochin\"}}><u>Sign in ChatVerse</u></a>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sign","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatRoom.js",["53","54","55","56","57","58","59","60","61","62"],"// import logo from './logo.svg';\n// import { Face, Pose, Hand } from \"kalidokit\";\nimport React from 'react';\nimport { Holistic } from \"@mediapipe/holistic\"\nimport { Camera } from \"@mediapipe/camera_utils\"\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { VRM, VRMSchema, VRMUtils } from '@pixiv/three-vrm';\nimport * as THREE from 'three';\nimport * as Kalidokit from \"kalidokit\";\nimport ChatBar from './ChatBar';\nimport {FBXLoader} from 'three/examples/jsm/loaders/FBXLoader'\nimport \"./ChatRoom.css\"\n\n\nvar VRMs = [];\nvar transforms = [];\nvar uids = []\n\nvar flag = false;\n\nconst theta = 2*Math.PI/9;\n\nvar uids_loading = [] // 用于记录正在下载VRM的玩家，避免重复下载\n\nvar oldLookTarget = new THREE.Euler();\nconst clock = new THREE.Clock();\nconst renderer =  new THREE.WebGLRenderer({\n    // canvas: document.querySelector(\"#cc\"), antialias: true, \n    alpha:true});\nvar orbitCamera;\nvar orbitControls\n\nvar motion_socket = null;\nvar uid;\nvar my_idx = -1;\n\nfunction ChatRoom() {\n\n    /* State Defnewion */\n    const [ videoElement, setVideoElement ] = React.useState(null);\n    const [ camera, setCamera ] = React.useState(null)\n    const [ holistic, setHolistic ] = React.useState(null)\n    const [ scene, setScene ] = React.useState(null)\n\n    \n    /* Initalizing Functions */\n\n    const getUid = () => {\n        // 从 URL Params 获取 roon name\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        uid = urlParams.get('uid');\n    }\n\n    const newVideoElement = () => setVideoElement(document.querySelector(\".input_video\"));\n\n    const newHolistic = () =>{\n        setHolistic(new Holistic({\n            locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;\n            }\n        }))\n    }\n\n    const initHolistic = () => {\n        holistic.setOptions({\n            modelComplexity: 1,\n            smoothLandmarks: true,\n            minDetectionConfidence: 0.7,\n            minTrackingConfidence: 0.7,\n            refineFaceLandmarks: true,\n        });\n        holistic.onResults(onResults);\n    }\n\n    const newCamera = () => setCamera(new Camera(videoElement, {\n        onFrame: async () => {\n            await holistic.send({image: videoElement});\n        },\n        width: 640,\n        height: 480\n    }))\n\n    const newScene = () => {\n        setScene( new THREE.Scene() )\n    }\n\n    const newLight = () => {\n        // const light = new THREE.DirectionalLight(0xffffff);\n        // light.position.set(1.0, 1.0, 1.0).normalize();\n        // scene.add(light);\n        let Ambient = new THREE.AmbientLight(0x404040, 2);\n        scene.add(Ambient);\n\n        //给场景添加太阳光\n        let Sun = new THREE.DirectionalLight(0xffffff, 1);\n        Sun.position.set(1, 1, 1);\n        Sun.castShadow = true;\n\n        //设置相机渲染面积\n        Sun.shadow.camera.near = 0.01;\n        Sun.shadow.camera.far = 60;\n        Sun.shadow.camera.top = 22;\n        Sun.shadow.camera.bottom = -22;\n        Sun.shadow.camera.left = -35;\n        Sun.shadow.camera.right = 35;\n        // //设置阴影分辨率\n        Sun.shadow.mapSize.width = 2048;  // default\n        Sun.shadow.mapSize.height = 2048; // default\n        //阴影限制\n        Sun.shadow.radius = 1;\n        scene.add(Sun);\n    }\n\n    const loadSky = () => {\n        const pictures = [\"/models/right.jpg\", \"/models/left.jpg\", \"/models/top.jpg\", \"/models/bottom.jpg\", \"/models/front.jpg\", \"/models/back.jpg\"];\n        var textureCube = new THREE.CubeTextureLoader().load(pictures);\n        scene.background = textureCube;\n    }\n\n    const loadBase = () => {\n        let textureLoader = new THREE.TextureLoader()\n        let texture = textureLoader.load(\"/models/base.jpg\")\n        // THREE.RepeatWrapping：平铺重复。\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping; \n        // 设置重复次数\n        texture.repeat.set(100, 100)\n        let geometry = new THREE.PlaneGeometry(1000, 1000, 32);\n        let material = new THREE.MeshBasicMaterial({\n                map: texture,  // 使用纹理贴图\n                side: THREE.DoubleSide  // 两面都渲染\n            });\n        let plane = new THREE.Mesh(geometry, material);\n        plane.rotateX(Math.PI / 2)\n        scene.add(plane);\n    }\n\n    const loadFBX = () => {\n        var loader = new FBXLoader();\n        loader.load('/models/Cottage/Cottage_FREE.fbx', (object) => {\n            console.log(object)\n            const list = [\n                '/models/Cottage/Cottage_Clean_Base_Color.png',\n                '/models/Cottage/Cottage_Clean_AO.png',\n                '/models/Cottage/Cottage_Clean_Height.png',\n                '/models/Cottage/Cottage_Clean_Metallic.png',\n                '/models/Cottage/Cottage_Clean_MetallicSmoothness.png',\n                '/models/Cottage/Cottage_Clean_Normal.png',\n                '/models/Cottage/Cottage_Clean_Roughness.png',\n                '/models/Cottage/Cottage_Clean_Opacity.png'\n            ]\n            const textureLoader = new THREE.TextureLoader();\n            object.traverse( function ( child ) {\n                if ( child.isMesh ) {\n                    console.log(child)\n                    child.castShadow = true;\n                    child.receiveShadow = true;\n                    child.material.map = textureLoader.load(list[0])\n                    child.material.aoMap = textureLoader.load(list[1])\n                    child.material.alphaMap = textureLoader.load(list[2])\n                }\n            } );\n            //缩放\n            object.scale.set(0.01,0.01,0.01);\n            //位置\n            object.position.set(-30,0,-30);\n            scene.add( object ); \n        },null,(e)=>{console.log(e)})\n    }\n\n    const initRenderingPipeline = () => {\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        document.body.appendChild(renderer.domElement);\n\n        // 下面这行可以禁用THREE的交互\n        // renderer.domElement.style.pointerEvents = \"none\" \n        orbitCamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n        orbitCamera.position.set(0.0, 1.4, 0.7);\n\n        orbitControls = new OrbitControls(orbitCamera, renderer.domElement);\n        orbitControls.screenSpacePanning = true;\n        orbitControls.target.set(0.0, 1.4, 0.0);\n        orbitControls.update();\n    }\n\n\n\n\n    /* Logic Functions */\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const loadVRM = (_uid) => {\n\n        // console.log(\"1\",uid, _uid)\n\n        if(!scene) { console.log(\"No scene, return\");return}\n\n        uids_loading.push(_uid)\n\n        const loader = new GLTFLoader();\n        loader.crossOrigin = \"anonymous\";\n\n        // TODO: 不同的UID从不同的URL获取\n        // 需要查询Avatar数据库\n        loader.load(\n            \"https://cdn.glitch.com/29e07830-2317-4b15-a044-135e73c7f840%2FAshtra.vrm?v=1630342336981\",\n    \n            gltf => {\n                VRMUtils.removeUnnecessaryJoints(gltf.scene);\n    \n                VRM.from(gltf).then(vrm => {\n                    let idx = VRMs.length\n                    scene.add(vrm.scene);\n                    VRMs[idx] = vrm\n                    uids[idx] = _uid\n                    // console.log(\"2\",uid, _uid)\n                    if(_uid===uid){\n                        my_idx=idx\n                        console.log(\"init control\")\n                        initControl()\n                    }\n                    console.log(\"Loaded a new player\",uid, idx)\n                    uids_loading.splice(uids_loading.indexOf(uid),1)\n                });\n                \n            },\n    \n            progress =>\n                // console.log(\n                //     \"Loading model...\",\n                //     100.0 * (progress.loaded / progress.total),\n                //     \"%\"\n                // ),\n    \n            error => {\n                console.error(error)\n\n            }\n        );\n    }\n\n    /* SHOULD DEBUG */\n    // 不想思考角度换算了，谁来思考一下\n    const initControl = () => {\n\n        if(my_idx!==undefined){\n\n            transforms[my_idx] = {x:0, z:0, r:0}\n\n            document.addEventListener('keypress', e=>{\n                if(transforms[my_idx]){\n                    var e = e || window.event;\n                    if(e.key == 'w'){\n                        transforms[my_idx].x -= 0.1 * Math.sin(transforms[my_idx].r*theta)\n                        transforms[my_idx].z -= 0.1 * Math.cos(transforms[my_idx].r*theta)\n                        orbitControls.target.set(\n                            transforms[my_idx].x,\n                            1.4,\n                            transforms[my_idx].z\n                        )\n                        orbitCamera.position.set(\n                            -0.1 * Math.sin(transforms[my_idx].r*theta) + orbitCamera.position.x,\n                            orbitCamera.position.y,\n                            -0.1 * Math.cos(transforms[my_idx].r*theta) + orbitCamera.position.z\n                        )\n                    }\n                    if(e.key == 's'){\t\n                        transforms[my_idx].x += 0.1 * Math.sin(transforms[my_idx].r*theta)\n                        transforms[my_idx].z += 0.1 * Math.cos(transforms[my_idx].r*theta)\n                        orbitControls.target.set(\n                            transforms[my_idx].x,\n                            1.4,\n                            transforms[my_idx].z\n                        )\n                        orbitCamera.position.set(\n                            -0.1 * Math.sin(transforms[my_idx].r*theta) + orbitCamera.position.x,\n                            orbitCamera.position.y,\n                            -0.1 * Math.cos(transforms[my_idx].r*theta) + orbitCamera.position.z\n                        )\n                    }\n                    if(e.key == 'a'){\n                        transforms[my_idx].r += 0.3\n                    }\n                    if(e.key == 'd'){\t\n                        transforms[my_idx].r -= 0.3\n                    }\n                }\n            }) \n        }\n    }\n\n\n    const rigRotation = (\n        idx,\n        name,\n        rotation = { x: 0, y: 0, z: 0 },\n        dampener = 1,\n        lerpAmount = 0.3\n    ) => {\n        let currentVrm = VRMs[idx]\n        if (!currentVrm) {return}\n        const Part = currentVrm.humanoid.getBoneNode(\n            VRMSchema.HumanoidBoneName[name]\n        );\n        if (!Part) {return}\n\n        \n        let euler = new THREE.Euler(\n            rotation.x * dampener,\n            rotation.y * dampener,\n            rotation.z * dampener\n        );\n        let quaternion = new THREE.Quaternion().setFromEuler(euler);\n        Part.quaternion.slerp(quaternion, lerpAmount); // interpolate\n    };\n\n    // Animate Position Helper Function\n    const rigPosition = (\n        idx,\n        name,\n        position = { x: 0, y: 0, z: 0 },\n        dampener = 1,\n        lerpAmount = 0.3\n    ) => {\n        let currentVrm = VRMs[idx]\n        if (!currentVrm) {return}\n        const Part = currentVrm.humanoid.getBoneNode(\n        VRMSchema.HumanoidBoneName[name]\n        );\n        if (!Part) {return}\n        let vector = new THREE.Vector3(\n            position.x * dampener,\n            position.y * dampener,\n            position.z * dampener\n        );\n        Part.position.lerp(vector, lerpAmount); // interpolate\n    };\n\n    const rigFace = (idx, riggedFace) => {\n\n        let currentVrm = VRMs[idx]\n\n        // Renaming sime useful functions for easy use.\n        const remap = Kalidokit.Utils.remap;\n        const clamp = Kalidokit.Utils.clamp;\n        const lerp = Kalidokit.Vector.lerp;\n\n        \n\n        if(!currentVrm){return}\n        rigRotation(idx, \"Neck\", riggedFace.head, 0.7);\n    \n        // Blendshapes and Preset Name Schema\n        const Blendshape = currentVrm.blendShapeProxy;\n        const PresetName = VRMSchema.BlendShapePresetName;\n      \n        // Simple example without winking. Interpolate based on old blendshape, then stabilize blink with `Kalidokit` helper function.\n        // for VRM, 1 is closed, 0 is open.\n        riggedFace.eye.l = lerp(clamp(1 - riggedFace.eye.l, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\n        riggedFace.eye.r = lerp(clamp(1 - riggedFace.eye.r, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\n        riggedFace.eye = Kalidokit.Face.stabilizeBlink(riggedFace.eye,riggedFace.head.y)\n        Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);\n        \n        // Interpolate and set mouth blendshapes\n        Blendshape.setValue(PresetName.I, lerp(riggedFace.mouth.shape.I,Blendshape.getValue(PresetName.I), .5));\n        Blendshape.setValue(PresetName.A, lerp(riggedFace.mouth.shape.A,Blendshape.getValue(PresetName.A), .5));\n        Blendshape.setValue(PresetName.E, lerp(riggedFace.mouth.shape.E,Blendshape.getValue(PresetName.E), .5));\n        Blendshape.setValue(PresetName.O, lerp(riggedFace.mouth.shape.O,Blendshape.getValue(PresetName.O), .5));\n        Blendshape.setValue(PresetName.U, lerp(riggedFace.mouth.shape.U,Blendshape.getValue(PresetName.U), .5));\n    \n        //PUPILS\n        //interpolate pupil and keep a copy of the value\n        let lookTarget =\n          new THREE.Euler(\n            lerp(oldLookTarget.x , riggedFace.pupil.y, .4),\n            lerp(oldLookTarget.y, riggedFace.pupil.x, .4),\n            0,\n            \"XYZ\"\n          )\n        oldLookTarget.copy(lookTarget)\n        currentVrm.lookAt.applyer.lookAt(lookTarget);\n    }\n\n    const onResults = (results) => {\n        // Animate model\n        if (!VRMs[my_idx]) return;\n\n        // Take the results from `Holistic` and animate character based on its Face, Pose, and Hand Keypoints.\n        let riggedPose, riggedLeftHand, riggedRightHand, riggedFace;\n    \n        const faceLandmarks = results.faceLandmarks;\n        // Pose 3D Landmarks are with respect to Hip distance in meters\n        const pose3DLandmarks = results.ea;\n        // Pose 2D landmarks are with respect to videoWidth and videoHeight\n        const pose2DLandmarks = results.poseLandmarks;\n        // Be careful, hand landmarks may be reversed\n        const leftHandLandmarks = results.rightHandLandmarks;\n        const rightHandLandmarks = results.leftHandLandmarks;\n        \n\n        // Animate Face\n        if (faceLandmarks) {\n            riggedFace = Kalidokit.Face.solve(faceLandmarks,{\n                runtime:\"mediapipe\",\n                video:videoElement\n            });\n        }\n\n        \n        \n        // Animate Pose\n        if (pose2DLandmarks && pose3DLandmarks) {\n            riggedPose = Kalidokit.Pose.solve(pose3DLandmarks, pose2DLandmarks, {\n                runtime: \"mediapipe\",\n                video:videoElement,\n            });\n        }\n        \n            // Animate Hands\n        if (leftHandLandmarks) {\n            riggedLeftHand = Kalidokit.Hand.solve(leftHandLandmarks, \"Left\");\n        }\n            \n        if (rightHandLandmarks) {\n            riggedRightHand = Kalidokit.Hand.solve(rightHandLandmarks, \"Right\");\n        }\n    \n        \n        // Socket send data\n        let my_data = {\n            uid,\n\n            riggedPose,\n            riggedLeftHand,\n            riggedRightHand,\n            riggedFace,\n\n            transform:transforms[my_idx]\n        }\n        \n        if(flag) motion_socket.send(JSON.stringify(my_data))\n\n        // applyMovements( my_data, idx )\n    }\n\n    const applyMovements = ( data, idx ) => {\n\n        let {\n            riggedPose,\n            riggedLeftHand,\n            riggedRightHand,\n            riggedFace,\n            transform,\n        } = data\n\n\n        try{\n\n            // console.log(riggedFace)\n            rigFace(idx, riggedFace)\n        }catch{}\n\n        try{\n            \n            rigRotation(idx, \"Hips\", {...riggedPose.Hips.rotation, y: riggedPose.Hips.rotation.y + transforms[my_idx].r}, 0.7);\n            rigPosition(\n                \"Hips\",\n                {\n                    x: riggedPose.Hips.position.x,// Reverse direction\n                    y: riggedPose.Hips.position.y + 1, // Add a bit of height\n                    z: -riggedPose.Hips.position.z // Reverse direction\n                },\n                1,\n                0.07\n            );\n        \n            rigRotation(idx, \"Chest\", riggedPose.Spine, 0.25, .3);\n            rigRotation(idx, \"Spine\", riggedPose.Spine, 0.45, .3);\n        \n            rigRotation(idx, \"RightUpperArm\", riggedPose.RightUpperArm, 1, .3);\n            rigRotation(idx, \"RightLowerArm\", riggedPose.RightLowerArm, 1, .3);\n            rigRotation(idx, \"LeftUpperArm\", riggedPose.LeftUpperArm, 1, .3);\n            rigRotation(idx, \"LeftLowerArm\", riggedPose.LeftLowerArm, 1, .3);\n        \n            rigRotation(idx, \"LeftUpperLeg\", riggedPose.LeftUpperLeg, 1, .3);\n            rigRotation(idx, \"LeftLowerLeg\", riggedPose.LeftLowerLeg, 1, .3);\n            rigRotation(idx, \"RightUpperLeg\", riggedPose.RightUpperLeg, 1, .3);\n            rigRotation(idx, \"RightLowerLeg\", riggedPose.RightLowerLeg, 1, .3);\n        }catch{}\n\n\n        try{\n            rigRotation(idx, \"LeftHand\", {\n                // Combine pose rotation Z and hand rotation X Y\n                z: riggedPose.LeftHand.z,\n                y: riggedLeftHand.LeftWrist.y,\n                x: riggedLeftHand.LeftWrist.x\n            });\n            rigRotation(idx, \"LeftRingProximal\", riggedLeftHand.LeftRingProximal);\n            rigRotation(idx, \"LeftRingIntermediate\", riggedLeftHand.LeftRingIntermediate);\n            rigRotation(idx, \"LeftRingDistal\", riggedLeftHand.LeftRingDistal);\n            rigRotation(idx, \"LeftIndexProximal\", riggedLeftHand.LeftIndexProximal);\n            rigRotation(idx, \"LeftIndexIntermediate\", riggedLeftHand.LeftIndexIntermediate);\n            rigRotation(idx, \"LeftIndexDistal\", riggedLeftHand.LeftIndexDistal);\n            rigRotation(idx, \"LeftMiddleProximal\", riggedLeftHand.LeftMiddleProximal);\n            rigRotation(idx, \"LeftMiddleIntermediate\", riggedLeftHand.LeftMiddleIntermediate);\n            rigRotation(idx, \"LeftMiddleDistal\", riggedLeftHand.LeftMiddleDistal);\n            rigRotation(idx, \"LeftThumbProximal\", riggedLeftHand.LeftThumbProximal);\n            rigRotation(idx, \"LeftThumbIntermediate\", riggedLeftHand.LeftThumbIntermediate);\n            rigRotation(idx, \"LeftThumbDistal\", riggedLeftHand.LeftThumbDistal);\n            rigRotation(idx, \"LeftLittleProximal\", riggedLeftHand.LeftLittleProximal);\n            rigRotation(idx, \"LeftLittleIntermediate\", riggedLeftHand.LeftLittleIntermediate);\n            rigRotation(idx, \"LeftLittleDistal\", riggedLeftHand.LeftLittleDistal);\n        }catch{}\n\n        try{\n            rigRotation(idx, \"RightHand\", {\n                // Combine Z axis from pose hand and X/Y axis from hand wrist rotation\n                z: riggedPose.RightHand.z,\n                y: riggedRightHand.RightWrist.y,\n                x: riggedRightHand.RightWrist.x\n            });\n            rigRotation(idx, \"RightRingProximal\", riggedRightHand.RightRingProximal);\n            rigRotation(idx, \"RightRingIntermediate\", riggedRightHand.RightRingIntermediate);\n            rigRotation(idx, \"RightRingDistal\", riggedRightHand.RightRingDistal);\n            rigRotation(idx, \"RightIndexProximal\", riggedRightHand.RightIndexProximal);\n            rigRotation(idx, \"RightIndexIntermediate\",riggedRightHand.RightIndexIntermediate);\n            rigRotation(idx, \"RightIndexDistal\", riggedRightHand.RightIndexDistal);\n            rigRotation(idx, \"RightMiddleProximal\", riggedRightHand.RightMiddleProximal);\n            rigRotation(idx, \"RightMiddleIntermediate\", riggedRightHand.RightMiddleIntermediate);\n            rigRotation(idx, \"RightMiddleDistal\", riggedRightHand.RightMiddleDistal);\n            rigRotation(idx, \"RightThumbProximal\", riggedRightHand.RightThumbProximal);\n            rigRotation(idx, \"RightThumbIntermediate\", riggedRightHand.RightThumbIntermediate);\n            rigRotation(idx, \"RightThumbDistal\", riggedRightHand.RightThumbDistal);\n            rigRotation(idx, \"RightLittleProximal\", riggedRightHand.RightLittleProximal);\n            rigRotation(idx, \"RightLittleIntermediate\", riggedRightHand.RightLittleIntermediate);\n            rigRotation(idx, \"RightLittleDistal\", riggedRightHand.RightLittleDistal);\n        }catch{}\n\n\n        \n\n        // 移动角色位置\n        VRMs[idx].scene.position.x = transform.x\n        VRMs[idx].scene.position.z = transform.z\n    }\n\n\n\n    /* Animation Related Functions */\n    function animate() {\n        requestAnimationFrame(animate);\n      \n        VRMs.forEach(vrm=>{\n            if (vrm) {\n            // Update model to render physics\n            vrm.update(clock.getDelta());\n            }\n        })\n\n        renderer.render(scene, orbitCamera);\n    }\n\n    /* Network (Socket) */\n\n    const initSocket = () => {\n        // 从 URL Params 获取 roon name\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const roomName = urlParams.get('roomname');\n        const wss_protocol = (window.location.protocol == 'https:') ? 'wss://': 'ws://';\n        motion_socket = new WebSocket(\n            wss_protocol + window.location.host + '/ws/motion/'  + roomName + '/'\n        );\n        // 建立webchat_socket连接时触发此方法\n        motion_socket.onopen = function(e) {\n            // Do nothing\n            flag = true;\n        }\n\n        // 从后台接收到数据时触发此方法\n        motion_socket.onmessage = function(e) {\n            const data = JSON.parse(e.data);\n            let {uid:_uid} = data;\n            let idx = uids.indexOf(_uid)\n            if(idx>=0){\n                applyMovements(data, idx)\n            }else{\n                if(!(uids_loading.indexOf(_uid)>=0)){\n                    // 收到一个未知用户的信号\n                    console.log(\"cannot found uid\", _uid, uids_loading)\n                    loadVRM(_uid)\n                }\n            }\n        }\n        \n    }\n    \n\n\n\n    /* Lifecycle Hooks */\n\n    // Init HTML element reference and some mudules\n    React.useEffect(()=>{\n        getUid()\n        newVideoElement()\n        newHolistic()\n        newScene()\n        initRenderingPipeline()\n    },[])\n\n    // When videoElement is found, new \"@mediapipe/camera_utils\".Camera\n    React.useEffect(()=>{\n        if(videoElement) newCamera()\n    },[videoElement])\n\n    // When Camera is Ready, start it.\n    React.useEffect(()=>{\n        if(camera) camera.start();\n    },[camera])\n\n\n    React.useEffect(()=>{\n        if(scene){\n            newLight()\n            loadFBX()\n            loadBase()\n            loadSky()\n            animate()\n            loadVRM(uid);  \n            initSocket()  \n            // var axisHelper = new THREE.AxisHelper(250);\n            // scene.add(axisHelper);\n            }\n    },[scene])\n\n    // React.useEffect(()=>{\n    //     setInterval(() => {\n    //         // console.log(\"position\",orbitCamera.position)\n    //         console.log(\"target\",orbitControls.target)\n    //         console.log(\"transforms\",transforms[my_idx])\n    //     }, 500);\n    // },[])\n\n    React.useEffect(()=>{\n        if(holistic) initHolistic()\n    },[holistic])\n\n    return(\n        <div className='ChatRoom'>\n            <video\n                className=\"input_video\" width=\"300px\" height=\"200px\"  autoPlay muted\n                style={{\n                    position:\"absolute\",\n                    left:8,bottom:20,\n                }}\n            ></video>  \n\n            <button className=\"quit_button\" style={{ position:\"absolute\", left:30,top:30,}} \n            onClick={()=>{window.location.href=\"/chatrooms\"}}>\n                Quit\n            </button>\n\n            <button className=\"shop_button\" style={{ position:\"absolute\", right:30,bottom:30,}} \n            onClick={()=>{window.location.href=\"/shop\"}}>\n                Shop\n            </button>\n\n\n            <ChatBar />     \n        </div>\n    )\n}\n\nexport default ChatRoom","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/Login.js",["63","64","65"],"import { message, Input, Button } from 'antd'\nimport React from 'react'\nimport { getCookie, setCookie } from './cookie'\nimport './Login.css'\n\nimport 'antd/dist/antd.css';\n\nvar Login = () =>{\n\n    var [Username, setUsername] = React.useState(\"\")\n    var [loginPassword, setLoginPassword] = React.useState(\"\")\n    var [title, setTitle] = React.useState(\"\")\n\n    const login = ()=>{\n        setCookie(\"update\",new Date().toUTCString())\n        fetch(`/user/login/`,{\n            method:'POST',\n            body:JSON.stringify({\n                username: Username,\n                password: loginPassword,\n            })\n        }).then(res=>{\n            if(res.status===200){\n                message.success(\"Successfully Login!\")\n                setTimeout(() => {\n                    window.location.href=\"/chatrooms\"\n                }, 1000);\n            }else if (res.status===403){\n                message.warn(\"Login Fail! Check Your Account, Password and Try Again!\")\n            }else{\n                message.warn(\"Unknown Error! Try Again!\")\n            }\n        }).then(data=>{\n\n        })\n    }\n\n   \n\n\n    return(\n        <div className='Login'>\n            <div className='Login-header'>\n                <div style={{\"fontSize\":\"calc(5vh + 30px)\", fontFamily:\"Cochin\"}}>Chat Verse</div>\n                <div style={{\"fontSize\":\"calc(1vh + 15px)\", fontFamily:\"Cochin\"}}>The Best Way for Everyone To Experience Metaverse\n                <br></br> Click Right Side to Begin\n                </div>\n            </div>\n            <div className='Login-form'>\n                <form>\n                    <div style={{fontSize:\"calc(1vh + 25px)\", fontFamily:\"Cochin\", textAlign:\"center\"}}>Welcome Back!</div>\n                    <div className='Login-form-username'>\n                        <div style={{textAlign:\"left\", fontFamily:\"Cochin\"}}>Username</div>\n                        <Input style={{\"height\":\"2rem\"}} id='username' type=\"text\" value={Username} onChange={e=>setUsername(e.target.value)}/>\n                    </div>\n                    <div className='Login-form-password'>\n                        <div style={{textAlign:\"left\", fontFamily:\"Cochin\"}}>Password</div>\n                        <Input style={{\"height\":\"2rem\"}} id='password' type=\"password\" visibilityToggle value={loginPassword} onChange={e=>setLoginPassword(e.target.value)}/>\n                    </div>\n                    <div className='Login-form-submit' style={{fontFamily:\"Cochin\"}}>\n                        <Button id='submit' type='button' onClick={()=>{login();}}>Sign in</Button>\n                    </div>\n                </form>\n                <div className='Login-Sign-in'>\n                     <a href=\"/sign\" style={{color:\"blueviolet\", fontFamily:\"Cochin\"}}><u>Sign up in ChatVerse</u></a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRooms/ChatRooms.js",["66"],"import { message, Input, Button } from 'antd'\nimport { setCookie } from '../Login/cookie'\nimport React from 'react'\n\nimport './ChatRooms.css'\n\nconst ChatRooms = () =>{\n    const [ createRoomName, setCreateRoomName ] = React.useState(\"\")\n    const [ verse_list, setVerseList ] = React.useState([])\n    const [ P_verse_list, setP_VerseList ] = React.useState([])\n\n\n    const createRoom = ()=>{\n        if (createRoomName===\"\"){\n            message.warn(\"Room Name Cannot Be Empty!\")\n        }else{\n            setCookie(\"update\",new Date().toUTCString())\n            fetch(`/chat/createRoom/`,{\n                method:'POST',\n                body:JSON.stringify({\n                    title:createRoomName\n                })\n            }).then(res=>{\n                if(res.status===200){\n                    message.success(\"Succfssfully Create Room\")\n                    return res.json()\n                    // setTimeout(() => {\n                    //     console.log(res)\n                    //     window.location.href=\"/chatroom/?room_name=\"+res.json()['room_name']\n                    // }, 1000);\n                }else if (res.status===403){\n                    message.warn(\"Create Room Fail\")\n                }else if (res.status===405){\n                    message.warn(\"Chat Room Already Exist\")\n                }else{\n                    message.warn(\"Create Room Fail\")\n                }\n            }).then(data=>{\n                if (data){\n                    // window.location.href=\"/chatroom/?room_name=\"+data.room_name\n                    window.location.reload()\n                }\n                \n            })\n        }\n    }\n\n    const joinRoom = (room_name)=>{\n        setCookie(\"update\",new Date().toUTCString())\n        fetch(`/chat/joinRoom/`,{\n            method:'POST',\n            body:JSON.stringify({\n                room_name:room_name\n            })\n        }).then(res=>{\n            if(res.status===200){\n                message.success(\"Succfssfully Join Room\")\n                window.location.href=\"/chatroom/?room_name=\"+room_name\n            }else{\n                message.warn(\"Join Room Fail\")\n            }\n        }).then(data=>{\n            if(data){\n            }\n        })\n    }\n\n    const deleteRoom = (room_name)=>{\n        setCookie(\"update\",new Date().toUTCString())\n        fetch(`/chat/deleteRoom/`,{\n            method:'POST',\n            body:JSON.stringify({\n                room_name:room_name\n            })\n        }).then(res=>{\n            if(res.status===200){\n                message.success(\"Succfssfully delete Room\")\n                window.location.reload()\n            }else{\n                message.warn(\"delete Room Fail\")\n            }\n        }).then(data=>{\n\n        })\n    }\n\n    const get_verse_list = ()=>{\n        fetch(`/chat/verse_list/`,{\n            method:'GET',\n        }).then(res=>{\n            if(res.status===200){\n                return res.json()\n            }else{\n                message.warn(\"get verse list Fail\")\n            }\n        }).then(data=>{\n            setVerseList(data.result)\n        })\n    }\n\n    const get_personal_verse_list = (uid)=>{\n        fetch(`/chat/verse_list/?filter_uid=true`,{\n            method:'GET',\n        }).then(res=>{\n            if(res.status===200){\n                return res.json()\n            }else{\n                message.warn(\"get personal verse list Fail\")\n            }\n        }).then(data=>{\n            setP_VerseList(data.result)\n        })\n    }\n\n    React.useEffect(()=>{\n        get_verse_list()\n        get_personal_verse_list()\n    },[])\n\n\n    return(\n        <div className='ChatRooms'>\n            <div className='ChatRooms-My'>\n                <div className='ChatRooms-My-Add'>\n                    <div style={{\n                            \"fontSize\":\"calc(3vh + 25px)\", color:\"white\", fontFamily:\"Cohina\",\n                            marginTop:\"8vh\"\n                        }}>\n                            Create a Verse\n                    </div>\n                    <div >\n                        <input placeholder=\"Room Name\" id='createRoom-input' style={{fontFamily:\"Cochin\", height:'6vh', width:'24vw',\n                        backgroundColor: 'rgba(255, 255, 255, 0.7)', borderRadius: '10px'}} value={createRoomName} onChange={e=>{\n                        setCreateRoomName(e.target.value)}}>\n                        </input>\n                    </div>\n\n                    <div className='createRoom-submit' style={{fontFamily:\"Cochin\"}}>\n                        <button style={{fontFamily:\"Cochin\", width:'8vw', height:'6vh',                       \n                        backgroundColor: 'rgba(255, 255, 255, 0.5)', borderRadius: '10px'}}  \n                        onClick={()=>{createRoom();console.log(createRoomName);}}>Create</button>\n                    </div>\n\n\n                </div>\n                <div style={{\n                        \"fontSize\":\"calc(3vh + 25px)\", color:\"white\", fontFamily:\"Cohina\",\n                        marginTop:\"4vh\"\n                    }}>\n                        My Verse\n                </div>\n\n\n                <div className='ChatRooms-My-VerseList'>\n                    {P_verse_list.map(verse=>{\n                        return(\n                            <div className='ChatRooms-My-VerseList-Verse' onClick={()=>{joinRoom(verse.room_name);}}>\n                                <div  style={{\"flexDirection\":\"column\", fontFamily:\"Cohina\"}}>\n                                    <div className='ChatRooms-My-VerseList-Verse-header' >\n                                        {verse.title}'s Chat Room\n                                    </div>\n                                    {/* <div className='ChatRooms-My-VerseList-Verse-content'>\n                                        {verse.membersCount} members active\n                                    </div> */}\n                                </div>\n                                <div style={{\"flexDirection\":\"column\" , fontFamily:\"Cohina\", width:'100px'}}>\n                                    {/* <Button type=\"link\" onClick={()=>{startRoom(verse.room_name);}}>Start Verse</Button> */}\n                                    <Button type=\"link\" onClick={()=>{deleteRoom(verse.room_name);}}>Delete Verse</Button>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n\n\n\n\n            </div>\n            <div style={{flexDirection:\"column\"}}>\n                <div style={{\n                        \"fontSize\":\"calc(3vh + 25px)\", color:\"white\", fontFamily:\"Cochin\" ,\n                        marginTop:\"8vh\"\n                    }}>\n                        The Verse World\n                </div>\n\n\n\n                <div className='ChatRooms-VerseList' style={{fontFamily:\"Cochin\"}}>\n                    {verse_list.map(verse=>{\n                        return(\n                            <div className='ChatRooms-VerseList-Verse'  onClick={()=>{joinRoom(verse.room_name);}}>\n                                <div className='ChatRooms-VerseList-Verse-header'>\n                                    {verse.title}\n                                </div>\n                                <div className='ChatRooms-VerseList-Verse-content'>\n                                    {verse.n_member} users visited.\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n\n\n\n            </div>\n\n            <button className=\"quit\" \n                onClick={()=>{window.location.href=\"/login\"}}>\n                    Quit\n            </button>\n\n\n            \n        </div>\n    )\n}\n\nexport default ChatRooms","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/cookie.js",["67"],"export function setCookie(name,value)\n{\n    var Days = 30;\n    var exp = new Date();\n    exp.setTime(exp.getTime() + Days*24*60*60*1000);\n    document.cookie = name + \"=\"+ escape (value) + \";path=/;expires=\" + exp.toGMTString();\n}\n\nexport function getCookie(name)\n{\n    var arr,reg=new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\");\n \n    if(arr=document.cookie.match(reg))\n \n        return unescape(arr[2]);\n    else\n        return null;\n}\n\nexport function delCookie(name)\n{\n    var exp = new Date();\n    exp.setTime(exp.getTime() - 1);\n    var cval=getCookie(name);\n    if(cval!=null)\n        document.cookie= name + \"=\"+cval+\";path=/;expires=\"+exp.toGMTString();\n}","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatBar.js",["68","69","70"],"import React, { useEffect } from \"react\";\nimport \"./ChatBar.css\"\n\nvar idx_max = 0\n\nvar chat_socket = null;\n\nvar timeout\n\nconst ChatBar = () => {\n\n    const [ text, setText ] = React.useState(\"\")\n\n\n\n    React.useEffect(()=>{\n        initSocket()\n    },[])\n\n    const [ messages, setMessages ] = React.useState([])\n\n    const initSocket = () => {\n        // 从 URL Params 获取 roon name\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const roomName = urlParams.get('roomname');\n        const wss_protocol = (window.location.protocol == 'https:') ? 'wss://': 'ws://';\n        chat_socket = new WebSocket(\n            wss_protocol + window.location.host + '/ws/chat/'  + roomName + '/'\n        );\n\n        console.log(wss_protocol + window.location.host + '/ws/chat/'  + roomName + '/')\n        // 建立webchat_socket连接时触发此方法\n        chat_socket.onopen = function(e) {\n            // Do nothing\n        }\n\n        // 从后台接收到数据时触发此方法\n        chat_socket.onmessage = function(e) {\n            const data = JSON.parse(e.data);\n            console.log(messages)\n            \n            \n            setMessages(messages => {\n                let msgs = messages.map(m=>m)\n                msgs.push({...data, idx:idx_max})\n                if(msgs.length>5){\n                    msgs = msgs.slice(1)\n                }\n                return msgs\n            })\n            idx_max += 1\n            \n            if(timeout) clearTimeout(timeout)\n            timeout = setTimeout(()=>{\n                setMessages([])\n                clearTimeout(timeout)\n            },5000,idx_max) // 5秒后全部消息消失\n            \n        };\n        \n    }\n\n    // const removeMsg = (idx) => {\n    //     let msgs = []\n    //     messages.forEach(m=>{if(idx===m.idx)msgs.push(m)})\n    //     setMessages(msgs)\n    // }\n\n\n    return (\n        <div className=\"ChatBar\">\n            <div className=\"ChatBar-messages\">\n                {messages.map(m=>(\n                    <div key={Math.random()} className=\"ChatBar-message\">\n                        {m.idx}: {m.message}\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"ChatBar-actions\">\n                <input placeholder=\"Massage\" style={{fontFamily:\"Cochin\", borderRadius: '10px'}} value={text} onChange={e=>{\n                    setText(e.target.value)\n                }}>\n                </input>\n\n\n                <button className=\"SendButton\" style={{fontFamily:\"Cochin\",borderRadius: '10px',opacity:'0.8',backgroundColor:'rgba(255, 255, 255, 0.5);'}} onClick={()=>{\n                    console.log(\"Send\")\n                    if (!chat_socket) { console.log(\"error\"); return }\n                    chat_socket.send(JSON.stringify({\n                        'message': text\n                    }));\n                }}>Send</button>\n            </div> \n        </div>\n    )\n}\n\nexport default ChatBar","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Shop/Shop.js",["71","72","73","74","75","76","77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":51,"column":39,"nodeType":"88","messageId":"89","endLine":51,"endColumn":49},{"ruleId":"90","severity":1,"message":"91","line":255,"column":25,"nodeType":"84","messageId":"92","endLine":255,"endColumn":26},{"ruleId":"93","severity":1,"message":"94","line":256,"column":30,"nodeType":"95","messageId":"89","endLine":256,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":270,"column":30,"nodeType":"95","messageId":"89","endLine":270,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":284,"column":30,"nodeType":"95","messageId":"89","endLine":284,"endColumn":32},{"ruleId":"93","severity":1,"message":"94","line":287,"column":30,"nodeType":"95","messageId":"89","endLine":287,"endColumn":32},{"ruleId":"82","severity":1,"message":"96","line":347,"column":15,"nodeType":"84","messageId":"85","endLine":347,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":574,"column":56,"nodeType":"95","messageId":"89","endLine":574,"endColumn":58},{"ruleId":"97","severity":1,"message":"98","line":619,"column":7,"nodeType":"99","endLine":619,"endColumn":21,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":639,"column":7,"nodeType":"99","endLine":639,"endColumn":14,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"103","line":651,"column":7,"nodeType":"99","endLine":651,"endColumn":17,"suggestions":"104"},{"ruleId":"82","severity":1,"message":"105","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":19},{"ruleId":"82","severity":1,"message":"106","line":12,"column":10,"nodeType":"84","messageId":"85","endLine":12,"endColumn":15},{"ruleId":"82","severity":1,"message":"107","line":12,"column":17,"nodeType":"84","messageId":"85","endLine":12,"endColumn":25},{"ruleId":"82","severity":1,"message":"108","line":1,"column":19,"nodeType":"84","messageId":"85","endLine":1,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":13,"column":8,"nodeType":"111","messageId":"112","endLine":13,"endColumn":38},{"ruleId":"82","severity":1,"message":"113","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"114","line":18,"column":7,"nodeType":"99","endLine":18,"endColumn":9,"suggestions":"115"},{"ruleId":"93","severity":1,"message":"94","line":27,"column":56,"nodeType":"95","messageId":"89","endLine":27,"endColumn":58},{"ruleId":"82","severity":1,"message":"108","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":15},{"ruleId":"82","severity":1,"message":"116","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":4,"column":10,"nodeType":"84","messageId":"85","endLine":4,"endColumn":13},{"ruleId":"82","severity":1,"message":"117","line":29,"column":11,"nodeType":"84","messageId":"85","endLine":29,"endColumn":22},{"ruleId":"82","severity":1,"message":"118","line":45,"column":11,"nodeType":"84","messageId":"85","endLine":45,"endColumn":27},{"ruleId":"119","severity":2,"message":"120","line":50,"column":24,"nodeType":"84","messageId":"121","endLine":50,"endColumn":29},{"ruleId":"119","severity":2,"message":"122","line":51,"column":22,"nodeType":"84","messageId":"121","endLine":51,"endColumn":25},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'fontFamily'.","ObjectExpression","unexpected","no-redeclare","'e' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'remap' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'newCamera'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook React.useEffect has missing dependencies: 'animate', 'initSocket', 'loadBase', 'loadFBX', 'loadSky', 'loadVRM', and 'newLight'. Either include them or remove the dependency array.",["126"],"React Hook React.useEffect has a missing dependency: 'initHolistic'. Either include it or remove the dependency array.",["127"],"'getCookie' is defined but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'Input' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useEffect' is defined but never used.","React Hook React.useEffect has a missing dependency: 'initSocket'. Either include it or remove the dependency array.",["128"],"'Button' is defined but never used.","'getMineList' is assigned a value but never used.","'uploadAvatarList' is assigned a value but never used.","no-undef","'title' is not defined.","undef","'src' is not defined.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [newCamera, videoElement]",{"range":"137","text":"138"},"Update the dependencies array to be: [animate, initSocket, loadBase, loadFBX, loadSky, loadVRM, newLight, scene]",{"range":"139","text":"140"},"Update the dependencies array to be: [holistic, initHolistic]",{"range":"141","text":"142"},"Update the dependencies array to be: [initSocket]",{"range":"143","text":"144"},[22317,22331],"[newCamera, videoElement]",[22781,22788],"[animate, initSocket, loadBase, loadFBX, loadSky, loadVRM, newLight, scene]",[23134,23144],"[holistic, initHolistic]",[251,253],"[initSocket]"]
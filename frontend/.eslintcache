[{"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\index.js":"1","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\App.js":"3","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\ChatRoom\\ChatRoom.js":"4","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Login\\Login.js":"5","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Sign\\Sign.js":"6","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Login\\cookie.js":"7","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\ChatRooms\\ChatRooms.js":"8"},{"size":523,"mtime":1647421769427,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1647421769427,"results":"11","hashOfConfig":"10"},{"size":936,"mtime":1650098679497,"results":"12","hashOfConfig":"10"},{"size":14924,"mtime":1649738011763,"results":"13","hashOfConfig":"10"},{"size":2456,"mtime":1650099355345,"results":"14","hashOfConfig":"10"},{"size":3387,"mtime":1650098776903,"results":"15","hashOfConfig":"10"},{"size":684,"mtime":1650032290821,"results":"16","hashOfConfig":"10"},{"size":1215,"mtime":1650036883906,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1upi4jj",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\index.js",[],["37","38"],"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\App.js",[],"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\ChatRoom\\ChatRoom.js",["39","40","41","42"],"// import logo from './logo.svg';\r\n// import { Face, Pose, Hand } from \"kalidokit\";\r\nimport React from 'react';\r\nimport { Holistic } from \"@mediapipe/holistic\"\r\nimport { Camera } from \"@mediapipe/camera_utils\"\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { VRM, VRMSchema, VRMUtils } from '@pixiv/three-vrm';\r\nimport * as THREE from 'three';\r\nimport * as Kalidokit from \"kalidokit\";\r\n\r\nvar currentVrm;\r\nvar oldLookTarget = new THREE.Euler();\r\nconst clock = new THREE.Clock();\r\nconst renderer =  new THREE.WebGLRenderer({alpha:true});\r\nvar orbitCamera;\r\nvar orbitControls\r\n\r\nfunction ChatRoom() {\r\n\r\n    /* State Defnewion */\r\n    const [ videoElement, setVideoElement ] = React.useState(null);\r\n    const [ camera, setCamera ] = React.useState(null)\r\n    const [ holistic, setHolistic ] = React.useState(null)\r\n    const [ loader, setLoader ] = React.useState(null)\r\n    const [ scene, setScene ] = React.useState(null)\r\n\r\n    \r\n    /* Initalizing Functions */\r\n\r\n    const newVideoElement = () => setVideoElement(document.querySelector(\".input_video\"));\r\n\r\n    const newHolistic = () =>{\r\n        setHolistic(new Holistic({\r\n            locateFile: file => {\r\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;\r\n            }\r\n        }))\r\n    }\r\n\r\n    const initHolistic = () => {\r\n        holistic.setOptions({\r\n            modelComplexity: 1,\r\n            smoothLandmarks: true,\r\n            minDetectionConfidence: 0.7,\r\n            minTrackingConfidence: 0.7,\r\n            refineFaceLandmarks: true,\r\n        });\r\n\r\n        holistic.onResults(onResults);\r\n    }\r\n\r\n    const newLoader = () => {\r\n        const _loader = new GLTFLoader();\r\n        _loader.crossOrigin = \"anonymous\";\r\n        // Import model from URL, add your own model here\r\n        setLoader(_loader)\r\n    }\r\n\r\n    const newCamera = () => setCamera(new Camera(videoElement, {\r\n        onFrame: async () => {\r\n            await holistic.send({image: videoElement});\r\n        },\r\n        width: 640,\r\n        height: 480\r\n    }))\r\n\r\n    const newScene = () => {\r\n        setScene( new THREE.Scene() )\r\n    }\r\n\r\n    const newLight = () => {\r\n        const light = new THREE.DirectionalLight(0xffffff);\r\n        light.position.set(1.0, 1.0, 1.0).normalize();\r\n        scene.add(light);\r\n    }\r\n\r\n    const initRenderingPipeline = () => {\r\n\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        orbitCamera = new THREE.PerspectiveCamera(35,window.innerWidth / window.innerHeight,0.1,1000);\r\n        orbitCamera.position.set(0.0, 1.4, 0.7);\r\n\r\n        orbitControls = new OrbitControls(orbitCamera, renderer.domElement);\r\n        orbitControls.screenSpacePanning = true;\r\n        orbitControls.target.set(0.0, 1.4, 0.0);\r\n        orbitControls.update();\r\n    }\r\n\r\n\r\n\r\n\r\n    /* Logic Functions */\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const loadVRM = () => {\r\n        loader.load(\r\n            \"https://cdn.glitch.com/29e07830-2317-4b15-a044-135e73c7f840%2FAshtra.vrm?v=1630342336981\",\r\n    \r\n            gltf => {\r\n                VRMUtils.removeUnnecessaryJoints(gltf.scene);\r\n    \r\n                VRM.from(gltf).then(vrm => {\r\n                    scene.add(vrm.scene);\r\n                    currentVrm = vrm\r\n                    // setCurrentVrm(vrm);\r\n                    currentVrm.scene.rotation.y = Math.PI; // Rotate model 180deg to face camera\r\n                    console.log(\"DEBUG 2\")\r\n                });\r\n            },\r\n    \r\n            progress =>\r\n                console.log(\r\n                    \"Loading model...\",\r\n                    100.0 * (progress.loaded / progress.total),\r\n                    \"%\"\r\n                ),\r\n    \r\n            error => console.error(error)\r\n        );\r\n    }\r\n\r\n\r\n    const rigRotation = (\r\n        name,\r\n        rotation = { x: 0, y: 0, z: 0 },\r\n        dampener = 1,\r\n        lerpAmount = 0.3\r\n    ) => {\r\n        if (!currentVrm) {return}\r\n        const Part = currentVrm.humanoid.getBoneNode(\r\n            VRMSchema.HumanoidBoneName[name]\r\n        );\r\n        if (!Part) {return}\r\n        \r\n        let euler = new THREE.Euler(\r\n            rotation.x * dampener,\r\n            rotation.y * dampener,\r\n            rotation.z * dampener\r\n        );\r\n        let quaternion = new THREE.Quaternion().setFromEuler(euler);\r\n        Part.quaternion.slerp(quaternion, lerpAmount); // interpolate\r\n    };\r\n\r\n    // Animate Position Helper Function\r\n    const rigPosition = (\r\n        name,\r\n        position = { x: 0, y: 0, z: 0 },\r\n        dampener = 1,\r\n        lerpAmount = 0.3\r\n    ) => {\r\n        if (!currentVrm) {return}\r\n        const Part = currentVrm.humanoid.getBoneNode(\r\n        VRMSchema.HumanoidBoneName[name]\r\n        );\r\n        if (!Part) {return}\r\n        let vector = new THREE.Vector3(\r\n            position.x * dampener,\r\n            position.y * dampener,\r\n            position.z * dampener\r\n        );\r\n        Part.position.lerp(vector, lerpAmount); // interpolate\r\n    };\r\n\r\n\r\n\r\n    const rigFace = (riggedFace) => {\r\n\r\n        // Renaming sime useful functions for easy use.\r\n        const remap = Kalidokit.Utils.remap;\r\n        const clamp = Kalidokit.Utils.clamp;\r\n        const lerp = Kalidokit.Vector.lerp;\r\n\r\n        if(!currentVrm){return}\r\n        rigRotation(\"Neck\", riggedFace.head, 0.7);\r\n    \r\n        // Blendshapes and Preset Name Schema\r\n        const Blendshape = currentVrm.blendShapeProxy;\r\n        const PresetName = VRMSchema.BlendShapePresetName;\r\n      \r\n        // Simple example without winking. Interpolate based on old blendshape, then stabilize blink with `Kalidokit` helper function.\r\n        // for VRM, 1 is closed, 0 is open.\r\n        riggedFace.eye.l = lerp(clamp(1 - riggedFace.eye.l, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\r\n        riggedFace.eye.r = lerp(clamp(1 - riggedFace.eye.r, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\r\n        riggedFace.eye = Kalidokit.Face.stabilizeBlink(riggedFace.eye,riggedFace.head.y)\r\n        Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);\r\n        \r\n        // Interpolate and set mouth blendshapes\r\n        Blendshape.setValue(PresetName.I, lerp(riggedFace.mouth.shape.I,Blendshape.getValue(PresetName.I), .5));\r\n        Blendshape.setValue(PresetName.A, lerp(riggedFace.mouth.shape.A,Blendshape.getValue(PresetName.A), .5));\r\n        Blendshape.setValue(PresetName.E, lerp(riggedFace.mouth.shape.E,Blendshape.getValue(PresetName.E), .5));\r\n        Blendshape.setValue(PresetName.O, lerp(riggedFace.mouth.shape.O,Blendshape.getValue(PresetName.O), .5));\r\n        Blendshape.setValue(PresetName.U, lerp(riggedFace.mouth.shape.U,Blendshape.getValue(PresetName.U), .5));\r\n    \r\n        //PUPILS\r\n        //interpolate pupil and keep a copy of the value\r\n        let lookTarget =\r\n          new THREE.Euler(\r\n            lerp(oldLookTarget.x , riggedFace.pupil.y, .4),\r\n            lerp(oldLookTarget.y, riggedFace.pupil.x, .4),\r\n            0,\r\n            \"XYZ\"\r\n          )\r\n        oldLookTarget.copy(lookTarget)\r\n        currentVrm.lookAt.applyer.lookAt(lookTarget);\r\n    }\r\n\r\n    \r\n\r\n\r\n    const onResults = (results) => {\r\n        // Animate model\r\n        var vrm = currentVrm;\r\n        if (!vrm) return;\r\n\r\n        // Take the results from `Holistic` and animate character based on its Face, Pose, and Hand Keypoints.\r\n        let riggedPose, riggedLeftHand, riggedRightHand, riggedFace;\r\n    \r\n        const faceLandmarks = results.faceLandmarks;\r\n        // Pose 3D Landmarks are with respect to Hip distance in meters\r\n        const pose3DLandmarks = results.ea;\r\n        // Pose 2D landmarks are with respect to videoWidth and videoHeight\r\n        const pose2DLandmarks = results.poseLandmarks;\r\n        // Be careful, hand landmarks may be reversed\r\n        const leftHandLandmarks = results.rightHandLandmarks;\r\n        const rightHandLandmarks = results.leftHandLandmarks;\r\n    \r\n        // Animate Face\r\n        if (faceLandmarks) {\r\n            riggedFace = Kalidokit.Face.solve(faceLandmarks,{\r\n                runtime:\"mediapipe\",\r\n                video:videoElement\r\n            });\r\n\r\n            console.log(riggedFace)\r\n            rigFace(riggedFace)\r\n        }\r\n        \r\n            // Animate Pose\r\n        if (pose2DLandmarks && pose3DLandmarks) {\r\n            riggedPose = Kalidokit.Pose.solve(pose3DLandmarks, pose2DLandmarks, {\r\n                runtime: \"mediapipe\",\r\n                video:videoElement,\r\n            });\r\n            rigRotation(\"Hips\", riggedPose.Hips.rotation, 0.7);\r\n            rigPosition(\r\n                \"Hips\",\r\n                {\r\n                    x: -riggedPose.Hips.position.x, // Reverse direction\r\n                    y: riggedPose.Hips.position.y + 1, // Add a bit of height\r\n                    z: -riggedPose.Hips.position.z // Reverse direction\r\n                },\r\n                1,\r\n                0.07\r\n            );\r\n        \r\n            rigRotation(\"Chest\", riggedPose.Spine, 0.25, .3);\r\n            rigRotation(\"Spine\", riggedPose.Spine, 0.45, .3);\r\n        \r\n            rigRotation(\"RightUpperArm\", riggedPose.RightUpperArm, 1, .3);\r\n            rigRotation(\"RightLowerArm\", riggedPose.RightLowerArm, 1, .3);\r\n            rigRotation(\"LeftUpperArm\", riggedPose.LeftUpperArm, 1, .3);\r\n            rigRotation(\"LeftLowerArm\", riggedPose.LeftLowerArm, 1, .3);\r\n        \r\n            rigRotation(\"LeftUpperLeg\", riggedPose.LeftUpperLeg, 1, .3);\r\n            rigRotation(\"LeftLowerLeg\", riggedPose.LeftLowerLeg, 1, .3);\r\n            rigRotation(\"RightUpperLeg\", riggedPose.RightUpperLeg, 1, .3);\r\n            rigRotation(\"RightLowerLeg\", riggedPose.RightLowerLeg, 1, .3);\r\n        }\r\n        \r\n            // Animate Hands\r\n        if (leftHandLandmarks) {\r\n            riggedLeftHand = Kalidokit.Hand.solve(leftHandLandmarks, \"Left\");\r\n            rigRotation(\"LeftHand\", {\r\n                // Combine pose rotation Z and hand rotation X Y\r\n                z: riggedPose.LeftHand.z,\r\n                y: riggedLeftHand.LeftWrist.y,\r\n                x: riggedLeftHand.LeftWrist.x\r\n            });\r\n            rigRotation(\"LeftRingProximal\", riggedLeftHand.LeftRingProximal);\r\n            rigRotation(\"LeftRingIntermediate\", riggedLeftHand.LeftRingIntermediate);\r\n            rigRotation(\"LeftRingDistal\", riggedLeftHand.LeftRingDistal);\r\n            rigRotation(\"LeftIndexProximal\", riggedLeftHand.LeftIndexProximal);\r\n            rigRotation(\"LeftIndexIntermediate\", riggedLeftHand.LeftIndexIntermediate);\r\n            rigRotation(\"LeftIndexDistal\", riggedLeftHand.LeftIndexDistal);\r\n            rigRotation(\"LeftMiddleProximal\", riggedLeftHand.LeftMiddleProximal);\r\n            rigRotation(\"LeftMiddleIntermediate\", riggedLeftHand.LeftMiddleIntermediate);\r\n            rigRotation(\"LeftMiddleDistal\", riggedLeftHand.LeftMiddleDistal);\r\n            rigRotation(\"LeftThumbProximal\", riggedLeftHand.LeftThumbProximal);\r\n            rigRotation(\"LeftThumbIntermediate\", riggedLeftHand.LeftThumbIntermediate);\r\n            rigRotation(\"LeftThumbDistal\", riggedLeftHand.LeftThumbDistal);\r\n            rigRotation(\"LeftLittleProximal\", riggedLeftHand.LeftLittleProximal);\r\n            rigRotation(\"LeftLittleIntermediate\", riggedLeftHand.LeftLittleIntermediate);\r\n            rigRotation(\"LeftLittleDistal\", riggedLeftHand.LeftLittleDistal);\r\n        }\r\n            \r\n        if (rightHandLandmarks) {\r\n            riggedRightHand = Kalidokit.Hand.solve(rightHandLandmarks, \"Right\");\r\n            rigRotation(\"RightHand\", {\r\n                // Combine Z axis from pose hand and X/Y axis from hand wrist rotation\r\n                z: riggedPose.RightHand.z,\r\n                y: riggedRightHand.RightWrist.y,\r\n                x: riggedRightHand.RightWrist.x\r\n            });\r\n            rigRotation(\"RightRingProximal\", riggedRightHand.RightRingProximal);\r\n            rigRotation(\"RightRingIntermediate\", riggedRightHand.RightRingIntermediate);\r\n            rigRotation(\"RightRingDistal\", riggedRightHand.RightRingDistal);\r\n            rigRotation(\"RightIndexProximal\", riggedRightHand.RightIndexProximal);\r\n            rigRotation(\"RightIndexIntermediate\",riggedRightHand.RightIndexIntermediate);\r\n            rigRotation(\"RightIndexDistal\", riggedRightHand.RightIndexDistal);\r\n            rigRotation(\"RightMiddleProximal\", riggedRightHand.RightMiddleProximal);\r\n            rigRotation(\"RightMiddleIntermediate\", riggedRightHand.RightMiddleIntermediate);\r\n            rigRotation(\"RightMiddleDistal\", riggedRightHand.RightMiddleDistal);\r\n            rigRotation(\"RightThumbProximal\", riggedRightHand.RightThumbProximal);\r\n            rigRotation(\"RightThumbIntermediate\", riggedRightHand.RightThumbIntermediate);\r\n            rigRotation(\"RightThumbDistal\", riggedRightHand.RightThumbDistal);\r\n            rigRotation(\"RightLittleProximal\", riggedRightHand.RightLittleProximal);\r\n            rigRotation(\"RightLittleIntermediate\", riggedRightHand.RightLittleIntermediate);\r\n            rigRotation(\"RightLittleDistal\", riggedRightHand.RightLittleDistal);\r\n        }\r\n    }\r\n\r\n\r\n    /* Animation Related Functions */\r\n    function animate() {\r\n        requestAnimationFrame(animate);\r\n      \r\n        if (currentVrm) {\r\n          // Update model to render physics\r\n          currentVrm.update(clock.getDelta());\r\n        }\r\n        renderer.render(scene, orbitCamera);\r\n    }\r\n    \r\n\r\n\r\n\r\n    /* Lifecycle Hooks */\r\n\r\n    // Init HTML element reference and some mudules\r\n    React.useEffect(()=>{\r\n        newVideoElement()\r\n        newHolistic()\r\n        newLoader()\r\n        newScene()\r\n        initRenderingPipeline()\r\n    },[])\r\n\r\n    // When videoElement is found, new \"@mediapipe/camera_utils\".Camera\r\n    React.useEffect(()=>{\r\n        if(videoElement) newCamera()\r\n    },[videoElement])\r\n\r\n    // When Camera is Ready, start it.\r\n    React.useEffect(()=>{\r\n        if(camera) camera.start();\r\n    },[camera])\r\n\r\n\r\n    React.useEffect(()=>{\r\n        if(loader && scene) loadVRM();    \r\n    },[loadVRM, loader, scene])\r\n\r\n    React.useEffect(()=>{\r\n        if(scene){\r\n            newLight()\r\n            animate()\r\n        }\r\n    },[scene])\r\n\r\n    React.useEffect(()=>{\r\n        if(holistic) initHolistic()\r\n    },[holistic])\r\n\r\n    // React.useState(()=>{\r\n    //     console.log(\"DEBUG \",currentVrm)\r\n    // },[currentVrm])\r\n\r\n    return(\r\n        <div className='ChatRoom'>\r\n            <video\r\n                className=\"input_video\" width=\"300px\" height=\"200px\"  autoPlay muted\r\n                style={{\r\n                    position:\"absolute\",\r\n                    left:10,top:10,\r\n                }}\r\n            ></video>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Login\\Login.js",[],"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Sign\\Sign.js",["43"],"C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\Login\\cookie.js",["44"],"export function setCookie(name,value)\r\n{\r\n    var Days = 30;\r\n    var exp = new Date();\r\n    exp.setTime(exp.getTime() + Days*24*60*60*1000);\r\n    document.cookie = name + \"=\"+ escape (value) + \";path=/;expires=\" + exp.toGMTString();\r\n}\r\n\r\nexport function getCookie(name)\r\n{\r\n    var arr,reg=new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\");\r\n \r\n    if(arr=document.cookie.match(reg))\r\n \r\n        return unescape(arr[2]);\r\n    else\r\n        return null;\r\n}\r\n\r\nexport function delCookie(name)\r\n{\r\n    var exp = new Date();\r\n    exp.setTime(exp.getTime() - 1);\r\n    var cval=getCookie(name);\r\n    if(cval!=null)\r\n        document.cookie= name + \"=\"+cval+\";path=/;expires=\"+exp.toGMTString();\r\n}","C:\\Users\\86183\\Desktop\\college affairs\\cuhk learning\\CSC4001\\project\\chat_verse\\frontend\\src\\app\\components\\ChatRooms\\ChatRooms.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":173,"column":15,"nodeType":"51","messageId":"52","endLine":173,"endColumn":20},{"ruleId":"53","severity":1,"message":"54","line":355,"column":7,"nodeType":"55","endLine":355,"endColumn":21,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":372,"column":7,"nodeType":"55","endLine":372,"endColumn":14,"suggestions":"58"},{"ruleId":"53","severity":1,"message":"59","line":376,"column":7,"nodeType":"55","endLine":376,"endColumn":17,"suggestions":"60"},{"ruleId":"49","severity":1,"message":"61","line":3,"column":10,"nodeType":"51","messageId":"52","endLine":3,"endColumn":13},{"ruleId":"62","severity":1,"message":"63","line":13,"column":8,"nodeType":"64","messageId":"65","endLine":13,"endColumn":38},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'remap' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'newCamera'. Either include it or remove the dependency array.","ArrayExpression",["68"],"React Hook React.useEffect has missing dependencies: 'animate' and 'newLight'. Either include them or remove the dependency array.",["69"],"React Hook React.useEffect has a missing dependency: 'initHolistic'. Either include it or remove the dependency array.",["70"],"'API' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [newCamera, videoElement]",{"range":"77","text":"78"},"Update the dependencies array to be: [animate, newLight, scene]",{"range":"79","text":"80"},"Update the dependencies array to be: [holistic, initHolistic]",{"range":"81","text":"82"},[14006,14020],"[newCamera, videoElement]",[14366,14373],"[animate, newLight, scene]",[14448,14458],"[holistic, initHolistic]"]
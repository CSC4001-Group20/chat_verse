[{"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/index.js":"1","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/reportWebVitals.js":"2","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/App.js":"3","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRooms/ChatRooms.js":"4","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatRoom.js":"5","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Sign/Sign.js":"6","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/Login.js":"7","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/cookie.js":"8","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatBar.js":"9"},{"size":505,"mtime":1650102695497,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1650102695497,"results":"12","hashOfConfig":"11"},{"size":904,"mtime":1650102695393,"results":"13","hashOfConfig":"11"},{"size":1285,"mtime":1650180602197,"results":"14","hashOfConfig":"11"},{"size":18707,"mtime":1650160733413,"results":"15","hashOfConfig":"11"},{"size":3238,"mtime":1650180256260,"results":"16","hashOfConfig":"11"},{"size":2698,"mtime":1650180458457,"results":"17","hashOfConfig":"11"},{"size":658,"mtime":1650102695437,"results":"18","hashOfConfig":"11"},{"size":2899,"mtime":1650181079178,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nmmsgo",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/index.js",[],["41","42"],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/reportWebVitals.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/App.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRooms/ChatRooms.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatRoom.js",["43","44","45","46","47","48","49","50","51","52"],"// import logo from './logo.svg';\n// import { Face, Pose, Hand } from \"kalidokit\";\nimport React from 'react';\nimport { Holistic } from \"@mediapipe/holistic\"\nimport { Camera } from \"@mediapipe/camera_utils\"\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { VRM, VRMSchema, VRMUtils } from '@pixiv/three-vrm';\nimport * as THREE from 'three';\nimport * as Kalidokit from \"kalidokit\";\nimport ChatBar from './ChatBar';\n\nvar VRMs = [];\nvar transforms = [];\nvar uids = []\n\nvar uids_loading = [] // 用于记录正在下载VRM的玩家，避免重复下载\n\nvar oldLookTarget = new THREE.Euler();\nconst clock = new THREE.Clock();\nconst renderer =  new THREE.WebGLRenderer({alpha:true});\nvar orbitCamera;\nvar orbitControls\n\nvar motion_socket = null;\nvar uid;\nvar my_idx = -1;\n\nfunction ChatRoom() {\n\n    /* State Defnewion */\n    const [ videoElement, setVideoElement ] = React.useState(null);\n    const [ camera, setCamera ] = React.useState(null)\n    const [ holistic, setHolistic ] = React.useState(null)\n    const [ scene, setScene ] = React.useState(null)\n\n    \n    /* Initalizing Functions */\n\n    const getUid = () => {\n        // 从 URL Params 获取 roon name\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        uid = urlParams.get('uid');\n    }\n\n    const newVideoElement = () => setVideoElement(document.querySelector(\".input_video\"));\n\n    const newHolistic = () =>{\n        setHolistic(new Holistic({\n            locateFile: file => {\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;\n            }\n        }))\n    }\n\n    const initHolistic = () => {\n        holistic.setOptions({\n            modelComplexity: 1,\n            smoothLandmarks: true,\n            minDetectionConfidence: 0.7,\n            minTrackingConfidence: 0.7,\n            refineFaceLandmarks: true,\n        });\n\n        holistic.onResults(onResults);\n    }\n\n    const newCamera = () => setCamera(new Camera(videoElement, {\n        onFrame: async () => {\n            await holistic.send({image: videoElement});\n        },\n        width: 640,\n        height: 480\n    }))\n\n    const newScene = () => {\n        setScene( new THREE.Scene() )\n    }\n\n    const newLight = () => {\n        const light = new THREE.DirectionalLight(0xffffff);\n        light.position.set(1.0, 1.0, 1.0).normalize();\n        scene.add(light);\n    }\n\n    const initRenderingPipeline = () => {\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        document.body.appendChild(renderer.domElement);\n\n        // 下面这行可以禁用THREE的交互\n        // renderer.domElement.style.pointerEvents = \"none\" \n\n        orbitCamera = new THREE.PerspectiveCamera(35,window.innerWidth / window.innerHeight,0.1,1000);\n        orbitCamera.position.set(0.0, 1.4, 0.7);\n\n        orbitControls = new OrbitControls(orbitCamera, renderer.domElement);\n        orbitControls.screenSpacePanning = true;\n        orbitControls.target.set(0.0, 1.4, 0.0);\n        orbitControls.update();\n    }\n\n\n\n\n    /* Logic Functions */\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const loadVRM = (_uid) => {\n\n        if(!scene) { console.log(\"No scene, return\");return}\n\n        uids_loading.push(_uid)\n\n        const loader = new GLTFLoader();\n        loader.crossOrigin = \"anonymous\";\n\n        // TODO: 不同的UID从不同的URL获取\n        // 需要查询Avatar数据库\n        loader.load(\n            \"https://cdn.glitch.com/29e07830-2317-4b15-a044-135e73c7f840%2FAshtra.vrm?v=1630342336981\",\n    \n            gltf => {\n                VRMUtils.removeUnnecessaryJoints(gltf.scene);\n    \n                VRM.from(gltf).then(vrm => {\n                    let idx = VRMs.length\n                    scene.add(vrm.scene);\n                    VRMs[idx] = vrm\n                    uids[idx] = _uid\n                    if(toString(_uid)===toString(uid)){\n                        my_idx=idx\n                        initControl()\n                    }\n                    console.log(\"Loaded a new player\",uid, idx)\n                    uids_loading.splice(uids_loading.indexOf(uid),1)\n                });\n                \n            },\n    \n            progress =>\n                // console.log(\n                //     \"Loading model...\",\n                //     100.0 * (progress.loaded / progress.total),\n                //     \"%\"\n                // ),\n    \n            error => {\n                console.error(error)\n\n            }\n        );\n    }\n\n    /* SHOULD DEBUG */\n    // 不想思考角度换算了，谁来思考一下\n    const initControl = () => {\n\n        if(my_idx!==undefined){\n\n            transforms[my_idx] = {x:0, z:0, r:0}\n\n            document.addEventListener('keypress', e=>{\n                if(transforms[my_idx]){\n                    var e = e || window.event;\n                    if(e.key == 'w'){\n                        transforms[my_idx].x += 0.1 * Math.sin(transforms[my_idx].r)\n                        transforms[my_idx].z += 0.1 * Math.cos(transforms[my_idx].r)\n                    }\n                    if(e.key == 's'){\t\n                        transforms[my_idx].x -= 0.1 * Math.sin(transforms[my_idx].r)\n                        transforms[my_idx].z -= 0.1 * Math.cos(transforms[my_idx].r)\n                    }\n                    if(e.key == 'a'){\n                        transforms[my_idx].r += 0.3\n                    }\n                    if(e.key == 'd'){\t\n                        transforms[my_idx].r -= 0.3\n                    }\n                }\n            }) \n        }\n    }\n\n\n    const rigRotation = (\n        idx,\n        name,\n        rotation = { x: 0, y: 0, z: 0 },\n        dampener = 1,\n        lerpAmount = 0.3\n    ) => {\n        let currentVrm = VRMs[idx]\n        if (!currentVrm) {return}\n        const Part = currentVrm.humanoid.getBoneNode(\n            VRMSchema.HumanoidBoneName[name]\n        );\n        if (!Part) {return}\n\n        \n        let euler = new THREE.Euler(\n            rotation.x * dampener,\n            rotation.y * dampener,\n            rotation.z * dampener\n        );\n        let quaternion = new THREE.Quaternion().setFromEuler(euler);\n        Part.quaternion.slerp(quaternion, lerpAmount); // interpolate\n    };\n\n    // Animate Position Helper Function\n    const rigPosition = (\n        idx,\n        name,\n        position = { x: 0, y: 0, z: 0 },\n        dampener = 1,\n        lerpAmount = 0.3\n    ) => {\n        let currentVrm = VRMs[idx]\n        if (!currentVrm) {return}\n        const Part = currentVrm.humanoid.getBoneNode(\n        VRMSchema.HumanoidBoneName[name]\n        );\n        if (!Part) {return}\n        let vector = new THREE.Vector3(\n            position.x * dampener,\n            position.y * dampener,\n            position.z * dampener\n        );\n        Part.position.lerp(vector, lerpAmount); // interpolate\n    };\n\n\n\n    const rigFace = (idx, riggedFace) => {\n\n        let currentVrm = VRMs[idx]\n\n        // Renaming sime useful functions for easy use.\n        const remap = Kalidokit.Utils.remap;\n        const clamp = Kalidokit.Utils.clamp;\n        const lerp = Kalidokit.Vector.lerp;\n\n        \n\n        if(!currentVrm){return}\n        rigRotation(idx, \"Neck\", riggedFace.head, 0.7);\n    \n        // Blendshapes and Preset Name Schema\n        const Blendshape = currentVrm.blendShapeProxy;\n        const PresetName = VRMSchema.BlendShapePresetName;\n      \n        // Simple example without winking. Interpolate based on old blendshape, then stabilize blink with `Kalidokit` helper function.\n        // for VRM, 1 is closed, 0 is open.\n        riggedFace.eye.l = lerp(clamp(1 - riggedFace.eye.l, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\n        riggedFace.eye.r = lerp(clamp(1 - riggedFace.eye.r, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\n        riggedFace.eye = Kalidokit.Face.stabilizeBlink(riggedFace.eye,riggedFace.head.y)\n        Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);\n        \n        // Interpolate and set mouth blendshapes\n        Blendshape.setValue(PresetName.I, lerp(riggedFace.mouth.shape.I,Blendshape.getValue(PresetName.I), .5));\n        Blendshape.setValue(PresetName.A, lerp(riggedFace.mouth.shape.A,Blendshape.getValue(PresetName.A), .5));\n        Blendshape.setValue(PresetName.E, lerp(riggedFace.mouth.shape.E,Blendshape.getValue(PresetName.E), .5));\n        Blendshape.setValue(PresetName.O, lerp(riggedFace.mouth.shape.O,Blendshape.getValue(PresetName.O), .5));\n        Blendshape.setValue(PresetName.U, lerp(riggedFace.mouth.shape.U,Blendshape.getValue(PresetName.U), .5));\n    \n        //PUPILS\n        //interpolate pupil and keep a copy of the value\n        let lookTarget =\n          new THREE.Euler(\n            lerp(oldLookTarget.x , riggedFace.pupil.y, .4),\n            lerp(oldLookTarget.y, riggedFace.pupil.x, .4),\n            0,\n            \"XYZ\"\n          )\n        oldLookTarget.copy(lookTarget)\n        currentVrm.lookAt.applyer.lookAt(lookTarget);\n    }\n\n    \n\n\n    const onResults = (results) => {\n        // Animate model\n        if (!VRMs[my_idx]) return;\n\n        // Take the results from `Holistic` and animate character based on its Face, Pose, and Hand Keypoints.\n        let riggedPose, riggedLeftHand, riggedRightHand, riggedFace;\n    \n        const faceLandmarks = results.faceLandmarks;\n        // Pose 3D Landmarks are with respect to Hip distance in meters\n        const pose3DLandmarks = results.ea;\n        // Pose 2D landmarks are with respect to videoWidth and videoHeight\n        const pose2DLandmarks = results.poseLandmarks;\n        // Be careful, hand landmarks may be reversed\n        const leftHandLandmarks = results.rightHandLandmarks;\n        const rightHandLandmarks = results.leftHandLandmarks;\n        \n\n        // Animate Face\n        if (faceLandmarks) {\n            riggedFace = Kalidokit.Face.solve(faceLandmarks,{\n                runtime:\"mediapipe\",\n                video:videoElement\n            });\n        }\n\n        \n        \n        // Animate Pose\n        if (pose2DLandmarks && pose3DLandmarks) {\n            riggedPose = Kalidokit.Pose.solve(pose3DLandmarks, pose2DLandmarks, {\n                runtime: \"mediapipe\",\n                video:videoElement,\n            });\n        }\n        \n            // Animate Hands\n        if (leftHandLandmarks) {\n            riggedLeftHand = Kalidokit.Hand.solve(leftHandLandmarks, \"Left\");\n        }\n            \n        if (rightHandLandmarks) {\n            riggedRightHand = Kalidokit.Hand.solve(rightHandLandmarks, \"Right\");\n        }\n    \n        \n        // Socket send data\n        let my_data = {\n            uid,\n\n            riggedPose,\n            riggedLeftHand,\n            riggedRightHand,\n            riggedFace,\n        }\n        motion_socket.send(JSON.stringify(my_data))\n\n        // applyMovements( my_data, idx )\n    }\n\n    const applyMovements = ( data, idx ) => {\n\n        let {\n            riggedPose,\n            riggedLeftHand,\n            riggedRightHand,\n            riggedFace,\n        } = data\n\n\n        try{\n\n            // console.log(riggedFace)\n            rigFace(idx, riggedFace)\n        }catch{}\n\n        try{\n            \n            rigRotation(idx, \"Hips\", {...riggedPose.Hips.rotation, y: riggedPose.Hips.rotation.y + transforms[my_idx].r}, 0.7);\n            rigPosition(\n                \"Hips\",\n                {\n                    x: riggedPose.Hips.position.x,// Reverse direction\n                    y: riggedPose.Hips.position.y + 1, // Add a bit of height\n                    z: -riggedPose.Hips.position.z // Reverse direction\n                },\n                1,\n                0.07\n            );\n        \n            rigRotation(idx, \"Chest\", riggedPose.Spine, 0.25, .3);\n            rigRotation(idx, \"Spine\", riggedPose.Spine, 0.45, .3);\n        \n            rigRotation(idx, \"RightUpperArm\", riggedPose.RightUpperArm, 1, .3);\n            rigRotation(idx, \"RightLowerArm\", riggedPose.RightLowerArm, 1, .3);\n            rigRotation(idx, \"LeftUpperArm\", riggedPose.LeftUpperArm, 1, .3);\n            rigRotation(idx, \"LeftLowerArm\", riggedPose.LeftLowerArm, 1, .3);\n        \n            rigRotation(idx, \"LeftUpperLeg\", riggedPose.LeftUpperLeg, 1, .3);\n            rigRotation(idx, \"LeftLowerLeg\", riggedPose.LeftLowerLeg, 1, .3);\n            rigRotation(idx, \"RightUpperLeg\", riggedPose.RightUpperLeg, 1, .3);\n            rigRotation(idx, \"RightLowerLeg\", riggedPose.RightLowerLeg, 1, .3);\n        }catch{}\n\n\n        try{\n            rigRotation(idx, \"LeftHand\", {\n                // Combine pose rotation Z and hand rotation X Y\n                z: riggedPose.LeftHand.z,\n                y: riggedLeftHand.LeftWrist.y,\n                x: riggedLeftHand.LeftWrist.x\n            });\n            rigRotation(idx, \"LeftRingProximal\", riggedLeftHand.LeftRingProximal);\n            rigRotation(idx, \"LeftRingIntermediate\", riggedLeftHand.LeftRingIntermediate);\n            rigRotation(idx, \"LeftRingDistal\", riggedLeftHand.LeftRingDistal);\n            rigRotation(idx, \"LeftIndexProximal\", riggedLeftHand.LeftIndexProximal);\n            rigRotation(idx, \"LeftIndexIntermediate\", riggedLeftHand.LeftIndexIntermediate);\n            rigRotation(idx, \"LeftIndexDistal\", riggedLeftHand.LeftIndexDistal);\n            rigRotation(idx, \"LeftMiddleProximal\", riggedLeftHand.LeftMiddleProximal);\n            rigRotation(idx, \"LeftMiddleIntermediate\", riggedLeftHand.LeftMiddleIntermediate);\n            rigRotation(idx, \"LeftMiddleDistal\", riggedLeftHand.LeftMiddleDistal);\n            rigRotation(idx, \"LeftThumbProximal\", riggedLeftHand.LeftThumbProximal);\n            rigRotation(idx, \"LeftThumbIntermediate\", riggedLeftHand.LeftThumbIntermediate);\n            rigRotation(idx, \"LeftThumbDistal\", riggedLeftHand.LeftThumbDistal);\n            rigRotation(idx, \"LeftLittleProximal\", riggedLeftHand.LeftLittleProximal);\n            rigRotation(idx, \"LeftLittleIntermediate\", riggedLeftHand.LeftLittleIntermediate);\n            rigRotation(idx, \"LeftLittleDistal\", riggedLeftHand.LeftLittleDistal);\n        }catch{}\n\n        try{\n            rigRotation(idx, \"RightHand\", {\n                // Combine Z axis from pose hand and X/Y axis from hand wrist rotation\n                z: riggedPose.RightHand.z,\n                y: riggedRightHand.RightWrist.y,\n                x: riggedRightHand.RightWrist.x\n            });\n            rigRotation(idx, \"RightRingProximal\", riggedRightHand.RightRingProximal);\n            rigRotation(idx, \"RightRingIntermediate\", riggedRightHand.RightRingIntermediate);\n            rigRotation(idx, \"RightRingDistal\", riggedRightHand.RightRingDistal);\n            rigRotation(idx, \"RightIndexProximal\", riggedRightHand.RightIndexProximal);\n            rigRotation(idx, \"RightIndexIntermediate\",riggedRightHand.RightIndexIntermediate);\n            rigRotation(idx, \"RightIndexDistal\", riggedRightHand.RightIndexDistal);\n            rigRotation(idx, \"RightMiddleProximal\", riggedRightHand.RightMiddleProximal);\n            rigRotation(idx, \"RightMiddleIntermediate\", riggedRightHand.RightMiddleIntermediate);\n            rigRotation(idx, \"RightMiddleDistal\", riggedRightHand.RightMiddleDistal);\n            rigRotation(idx, \"RightThumbProximal\", riggedRightHand.RightThumbProximal);\n            rigRotation(idx, \"RightThumbIntermediate\", riggedRightHand.RightThumbIntermediate);\n            rigRotation(idx, \"RightThumbDistal\", riggedRightHand.RightThumbDistal);\n            rigRotation(idx, \"RightLittleProximal\", riggedRightHand.RightLittleProximal);\n            rigRotation(idx, \"RightLittleIntermediate\", riggedRightHand.RightLittleIntermediate);\n            rigRotation(idx, \"RightLittleDistal\", riggedRightHand.RightLittleDistal);\n        }catch{}\n\n        // 移动角色位置\n        VRMs[idx].scene.position.x = transforms[idx].x\n        VRMs[idx].scene.position.z = transforms[idx].z\n    }\n\n\n\n    /* Animation Related Functions */\n    function animate() {\n        requestAnimationFrame(animate);\n      \n        VRMs.forEach(vrm=>{\n            if (vrm) {\n            // Update model to render physics\n            vrm.update(clock.getDelta());\n            }\n        })\n\n        renderer.render(scene, orbitCamera);\n    }\n\n    /* Network (Socket) */\n\n    const initSocket = () => {\n        // 从 URL Params 获取 roon name\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const roomName = urlParams.get('roomname');\n        const wss_protocol = (window.location.protocol == 'https:') ? 'wss://': 'ws://';\n        motion_socket = new WebSocket(\n            wss_protocol + window.location.host + '/ws/motion/'  + roomName + '/'\n        );\n        // 建立webchat_socket连接时触发此方法\n        motion_socket.onopen = function(e) {\n            // Do nothing\n        }\n\n        // 从后台接收到数据时触发此方法\n        motion_socket.onmessage = function(e) {\n            const data = JSON.parse(e.data);\n            let {uid} = data;\n            let idx = uids.indexOf(uid)\n            if(idx>=0){\n                applyMovements(data, idx)\n            }else{\n                if(!(uids_loading.indexOf(uid)>=0)){\n                    // 收到一个未知用户的信号\n                    console.log(\"cannot found uid\", uid, uids_loading)\n                    loadVRM(uid)\n                }\n            }\n        }\n        \n    }\n    \n\n\n\n    /* Lifecycle Hooks */\n\n    // Init HTML element reference and some mudules\n    React.useEffect(()=>{\n        getUid()\n        newVideoElement()\n        newHolistic()\n        newScene()\n        initRenderingPipeline()\n    },[])\n\n    // When videoElement is found, new \"@mediapipe/camera_utils\".Camera\n    React.useEffect(()=>{\n        if(videoElement) newCamera()\n    },[videoElement])\n\n    // When Camera is Ready, start it.\n    React.useEffect(()=>{\n        if(camera) camera.start();\n    },[camera])\n\n\n    React.useEffect(()=>{\n        if(scene){\n            newLight()\n            animate()\n            loadVRM(uid);  \n            initSocket()  \n        }\n    },[scene])\n\n    React.useEffect(()=>{\n        if(holistic) initHolistic()\n    },[holistic])\n\n    return(\n        <div className='ChatRoom'>\n            <video\n                className=\"input_video\" width=\"300px\" height=\"200px\"  autoPlay muted\n                style={{\n                    position:\"absolute\",\n                    left:10,top:10,\n                }}\n            ></video>  \n\n\n            <ChatBar />     \n        </div>\n    )\n}\n\nexport default ChatRoom","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Sign/Sign.js",["53","54"],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/Login.js",[],"/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/Login/cookie.js",["55"],"export function setCookie(name,value)\n{\n    var Days = 30;\n    var exp = new Date();\n    exp.setTime(exp.getTime() + Days*24*60*60*1000);\n    document.cookie = name + \"=\"+ escape (value) + \";path=/;expires=\" + exp.toGMTString();\n}\n\nexport function getCookie(name)\n{\n    var arr,reg=new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\");\n \n    if(arr=document.cookie.match(reg))\n \n        return unescape(arr[2]);\n    else\n        return null;\n}\n\nexport function delCookie(name)\n{\n    var exp = new Date();\n    exp.setTime(exp.getTime() - 1);\n    var cval=getCookie(name);\n    if(cval!=null)\n        document.cookie= name + \"=\"+cval+\";path=/;expires=\"+exp.toGMTString();\n}","/Users/vito/Assignment/CSC4001/Project/chat_verse/frontend/src/app/components/ChatRoom/ChatBar.js",["56","57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":167,"column":25,"nodeType":"65","messageId":"66","endLine":167,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":168,"column":30,"nodeType":"69","messageId":"70","endLine":168,"endColumn":32},{"ruleId":"67","severity":1,"message":"68","line":172,"column":30,"nodeType":"69","messageId":"70","endLine":172,"endColumn":32},{"ruleId":"67","severity":1,"message":"68","line":176,"column":30,"nodeType":"69","messageId":"70","endLine":176,"endColumn":32},{"ruleId":"67","severity":1,"message":"68","line":179,"column":30,"nodeType":"69","messageId":"70","endLine":179,"endColumn":32},{"ruleId":"71","severity":1,"message":"72","line":241,"column":15,"nodeType":"65","messageId":"73","endLine":241,"endColumn":20},{"ruleId":"67","severity":1,"message":"68","line":464,"column":56,"nodeType":"69","messageId":"70","endLine":464,"endColumn":58},{"ruleId":"74","severity":1,"message":"75","line":508,"column":7,"nodeType":"76","endLine":508,"endColumn":21,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":523,"column":7,"nodeType":"76","endLine":523,"endColumn":14,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"80","line":527,"column":7,"nodeType":"76","endLine":527,"endColumn":17,"suggestions":"81"},{"ruleId":"71","severity":1,"message":"82","line":3,"column":10,"nodeType":"65","messageId":"73","endLine":3,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":46,"column":39,"nodeType":"85","messageId":"70","endLine":46,"endColumn":49},{"ruleId":"86","severity":1,"message":"87","line":13,"column":8,"nodeType":"88","messageId":"89","endLine":13,"endColumn":38},{"ruleId":"71","severity":1,"message":"90","line":1,"column":17,"nodeType":"65","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"91","line":18,"column":7,"nodeType":"76","endLine":18,"endColumn":9,"suggestions":"92"},{"ruleId":"67","severity":1,"message":"68","line":27,"column":56,"nodeType":"69","messageId":"70","endLine":27,"endColumn":58},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-redeclare","'e' is already defined.","Identifier","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'remap' is assigned a value but never used.","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'newCamera'. Either include it or remove the dependency array.","ArrayExpression",["95"],"React Hook React.useEffect has missing dependencies: 'animate', 'initSocket', 'loadVRM', and 'newLight'. Either include them or remove the dependency array.",["96"],"React Hook React.useEffect has a missing dependency: 'initHolistic'. Either include it or remove the dependency array.",["97"],"'API' is defined but never used.","no-dupe-keys","Duplicate key 'fontFamily'.","ObjectExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useEffect' is defined but never used.","React Hook React.useEffect has a missing dependency: 'initSocket'. Either include it or remove the dependency array.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [newCamera, videoElement]",{"range":"107","text":"108"},"Update the dependencies array to be: [animate, initSocket, loadVRM, newLight, scene]",{"range":"109","text":"110"},"Update the dependencies array to be: [holistic, initHolistic]",{"range":"111","text":"112"},"Update the dependencies array to be: [initSocket]",{"range":"113","text":"114"},[17730,17744],"[newCamera, videoElement]",[18026,18033],"[animate, initSocket, loadVRM, newLight, scene]",[18104,18114],"[holistic, initHolistic]",[251,253],"[initSocket]"]
[{"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\index.js":"1","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\App.js":"3","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Sign\\Sign.js":"4","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Login\\Login.js":"5","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRooms\\ChatRooms.js":"6","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRoom\\ChatRoom.js":"7","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Login\\cookie.js":"8","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRoom\\ChatBar.js":"9","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Shop\\Shop.js":"10"},{"size":523,"mtime":1650109030800,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1650109030801,"results":"13","hashOfConfig":"12"},{"size":1042,"mtime":1650267232286,"results":"14","hashOfConfig":"12"},{"size":3553,"mtime":1650267232406,"results":"15","hashOfConfig":"12"},{"size":2947,"mtime":1650259467742,"results":"16","hashOfConfig":"12"},{"size":8333,"mtime":1650292296265,"results":"17","hashOfConfig":"12"},{"size":25878,"mtime":1650294865978,"results":"18","hashOfConfig":"12"},{"size":684,"mtime":1650109030672,"results":"19","hashOfConfig":"12"},{"size":4294,"mtime":1650294463807,"results":"20","hashOfConfig":"12"},{"size":13419,"mtime":1650295064865,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ixzcu2",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\index.js",[],["45","46"],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\App.js",[],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Sign\\Sign.js",["47","48"],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Login\\Login.js",["49","50","51"],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRooms\\ChatRooms.js",[],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRoom\\ChatRoom.js",["52","53","54","55","56","57","58","59","60","61","62"],"// import logo from './logo.svg';\r\n// import { Face, Pose, Hand } from \"kalidokit\";\r\nimport React from 'react';\r\nimport { Holistic } from \"@mediapipe/holistic\"\r\nimport { Camera } from \"@mediapipe/camera_utils\"\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { VRM, VRMSchema, VRMUtils } from '@pixiv/three-vrm';\r\nimport * as THREE from 'three';\r\nimport * as Kalidokit from \"kalidokit\";\r\nimport ChatBar from './ChatBar';\r\nimport {FBXLoader} from 'three/examples/jsm/loaders/FBXLoader'\r\nimport \"./ChatRoom.css\"\r\nimport { PoweroffOutlined } from '@ant-design/icons';\r\nimport { ImportOutlined } from '@ant-design/icons';\r\nimport { ShoppingCartOutlined } from '@ant-design/icons';\r\nimport { message } from 'antd';\r\nimport { setCookie } from '../Login/cookie';\r\n\r\n\r\nvar VRMs = [];\r\nvar transforms = [];\r\nvar uids = []\r\n\r\nvar flag = false;\r\n\r\nconst theta = 2*Math.PI/9;\r\n\r\nvar uids_loading = [] // It is used to record the players who are downloading VRM to avoid repeated downloading\r\n\r\nvar oldLookTarget = new THREE.Euler();\r\nconst clock = new THREE.Clock();\r\nconst renderer =  new THREE.WebGLRenderer({alpha:true});\r\nvar orbitCamera;\r\nvar orbitControls\r\n\r\nvar motion_socket = null;\r\nvar uid;\r\nvar my_idx = -1;\r\n\r\nfunction ChatRoom() {\r\n\r\n    /* State Defnewion */\r\n    const [ videoElement, setVideoElement ] = React.useState(null);\r\n    const [ camera, setCamera ] = React.useState(null)\r\n    const [ holistic, setHolistic ] = React.useState(null)\r\n    const [ scene, setScene ] = React.useState(null)\r\n    // const [ avatar, setAvatar ] = React.useState(null)\r\n\r\n    \r\n    /* Initalizing Functions */\r\n\r\n    const getUsingAvatar = (uid, next)=>{\r\n        setCookie(\"update\",new Date().toUTCString())\r\n        fetch(`/user/avatar/?uid=${uid}`,{\r\n            method:'GET',\r\n        }).then(res=>{\r\n            if(res.status===200){\r\n                return res.json()\r\n            }else{\r\n                message.warn(\"get Avatar list Fail\")\r\n            }\r\n        }).then(data=>{\r\n            // setAvatar(data.result)\r\n            next(data.result)\r\n        }) \r\n    }\r\n\r\n    const getUid = () => {\r\n        // get room_name from URL Params\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        uid = urlParams.get('uid');\r\n    }\r\n\r\n    const newVideoElement = () => setVideoElement(document.querySelector(\".input_video\"));\r\n\r\n    const newHolistic = () =>{\r\n        setHolistic(new Holistic({\r\n            locateFile: file => {\r\n            return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic@0.5.1635989137/${file}`;\r\n            }\r\n        }))\r\n    }\r\n\r\n    const initHolistic = () => {\r\n        holistic.setOptions({\r\n            modelComplexity: 1,\r\n            smoothLandmarks: true,\r\n            minDetectionConfidence: 0.7,\r\n            minTrackingConfidence: 0.7,\r\n            refineFaceLandmarks: true,\r\n        });\r\n        holistic.onResults(onResults);\r\n    }\r\n\r\n    const newCamera = () => setCamera(new Camera(videoElement, {\r\n        onFrame: async () => {\r\n            await holistic.send({image: videoElement});\r\n        },\r\n        width: 640,\r\n        height: 480\r\n    }))\r\n\r\n    const newScene = () => {\r\n        setScene( new THREE.Scene() )\r\n    }\r\n\r\n    const newLight = () => {\r\n        // const light = new THREE.DirectionalLight(0xffffff);\r\n        // light.position.set(1.0, 1.0, 1.0).normalize();\r\n        // scene.add(light);\r\n        let Ambient = new THREE.AmbientLight(0x404040, 2);\r\n        scene.add(Ambient);\r\n\r\n        //add sunlight to the scene\r\n        let Sun = new THREE.DirectionalLight(0xffffff, 1);\r\n        Sun.position.set(1, 1, 1);\r\n        Sun.castShadow = true;\r\n\r\n        //set the render area of camera\r\n        Sun.shadow.camera.near = 0.01;\r\n        Sun.shadow.camera.far = 60;\r\n        Sun.shadow.camera.top = 22;\r\n        Sun.shadow.camera.bottom = -22;\r\n        Sun.shadow.camera.left = -35;\r\n        Sun.shadow.camera.right = 35;\r\n        // //set Shadow resolution\r\n        Sun.shadow.mapSize.width = 2048;  // default\r\n        Sun.shadow.mapSize.height = 2048; // default\r\n        //Shadow limit\r\n        Sun.shadow.radius = 1;\r\n        scene.add(Sun);\r\n    }\r\n\r\n    const loadSky = () => {\r\n        const pictures = [\"/models/right.jpg\", \"/models/left.jpg\", \"/models/top.jpg\", \"/models/bottom.jpg\", \"/models/front.jpg\", \"/models/back.jpg\"];\r\n        var textureCube = new THREE.CubeTextureLoader().load(pictures);\r\n        scene.background = textureCube;\r\n    }\r\n\r\n    const loadBase = () => {\r\n        let textureLoader = new THREE.TextureLoader()\r\n        let texture = textureLoader.load(\"/models/base.jpg\")\r\n        // THREE.RepeatWrappingï¼šTile repeat.\r\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping; \r\n        // set the time for repeat\r\n        texture.repeat.set(100, 100)\r\n        let geometry = new THREE.PlaneGeometry(1000, 1000, 32);\r\n        let material = new THREE.MeshBasicMaterial({\r\n                map: texture,  // Using texture maps\r\n                side: THREE.DoubleSide  // Render both sides\r\n            });\r\n        let plane = new THREE.Mesh(geometry, material);\r\n        plane.rotateX(Math.PI / 2)\r\n        scene.add(plane);\r\n    }\r\n\r\n    const loadFBX = () => {\r\n        var loader = new FBXLoader();\r\n        loader.load('/models/Cottage/Cottage_FREE.fbx', (object) => {\r\n            console.log(object)\r\n            const list = [\r\n                '/models/Cottage/Cottage_Clean_Base_Color.png',\r\n                '/models/Cottage/Cottage_Clean_AO.png',\r\n                '/models/Cottage/Cottage_Clean_Height.png',\r\n                '/models/Cottage/Cottage_Clean_Metallic.png',\r\n                '/models/Cottage/Cottage_Clean_MetallicSmoothness.png',\r\n                '/models/Cottage/Cottage_Clean_Normal.png',\r\n                '/models/Cottage/Cottage_Clean_Roughness.png',\r\n                '/models/Cottage/Cottage_Clean_Opacity.png'\r\n            ]\r\n            const textureLoader = new THREE.TextureLoader();\r\n            object.traverse( function ( child ) {\r\n                if ( child.isMesh ) {\r\n                    console.log(child)\r\n                    child.castShadow = true;\r\n                    child.receiveShadow = true;\r\n                    child.material.map = textureLoader.load(list[0])\r\n                    child.material.aoMap = textureLoader.load(list[1])\r\n                    child.material.alphaMap = textureLoader.load(list[2])\r\n                }\r\n            } );\r\n            //zoom\r\n            object.scale.set(0.01,0.01,0.01);\r\n            //location\r\n            object.position.set(-30,0,-30);\r\n            scene.add( object ); \r\n        },null,(e)=>{console.log(e)})\r\n    }\r\n\r\n    const initRenderingPipeline = () => {\r\n\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        // The following line can disable the interaction of three\r\n        // renderer.domElement.style.pointerEvents = \"none\" \r\n        orbitCamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        orbitCamera.position.set(0.0, 1.4, 0.7);\r\n\r\n        orbitControls = new OrbitControls(orbitCamera, renderer.domElement);\r\n        orbitControls.screenSpacePanning = true;\r\n        orbitControls.target.set(0.0, 1.4, 0.0);\r\n        orbitControls.update();\r\n    }\r\n\r\n\r\n\r\n\r\n    /* Logic Functions */\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const loadVRM = (_uid) => {\r\n\r\n        // console.log(\"1\",uid, _uid)\r\n\r\n        if(!scene) { console.log(\"No scene, return\");return}\r\n\r\n        uids_loading.push(_uid)\r\n\r\n        const loader = new GLTFLoader();\r\n        loader.crossOrigin = \"anonymous\";\r\n\r\n        getUsingAvatar(_uid, (avatar)=>{\r\n            // Different UIDs are obtained from different URLs\r\n            // Need to query avatar database\r\n            loader.load(\r\n                (avatar&&avatar.src)?avatar.src:\"https://cd-1302933783.cos.ap-guangzhou.myqcloud.com/chatverse/demo.vrm\",\r\n        \r\n                gltf => {\r\n                    VRMUtils.removeUnnecessaryJoints(gltf.scene);\r\n        \r\n                    VRM.from(gltf).then(vrm => {\r\n                        let idx = VRMs.length\r\n                        scene.add(vrm.scene);\r\n                        VRMs[idx] = vrm\r\n                        uids[idx] = _uid\r\n                        // console.log(\"2\",uid, _uid)\r\n                        if(_uid===uid){\r\n                            my_idx=idx\r\n                            console.log(\"init control\")\r\n                            initControl()\r\n                        }\r\n                        console.log(\"Loaded a new player\",uid, idx)\r\n                        uids_loading.splice(uids_loading.indexOf(uid),1)\r\n                    });\r\n                    \r\n                },\r\n        \r\n                progress =>\r\n                    // console.log(\r\n                    //     \"Loading model...\",\r\n                    //     100.0 * (progress.loaded / progress.total),\r\n                    //     \"%\"\r\n                    // ),\r\n        \r\n                error => {\r\n                    console.error(error)\r\n\r\n                }\r\n            );\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    /* SHOULD DEBUG */\r\n\r\n    const initControl = () => {\r\n\r\n        if(my_idx!==undefined){\r\n\r\n            transforms[my_idx] = {x:0, z:0, r:0}\r\n\r\n            document.addEventListener('keypress', e=>{\r\n                if(transforms[my_idx]){\r\n                    var e = e || window.event;\r\n                    if(e.key == 'w'){\r\n                        transforms[my_idx].x -= 0.1 * Math.sin(transforms[my_idx].r*theta)\r\n                        transforms[my_idx].z -= 0.1 * Math.cos(transforms[my_idx].r*theta)\r\n                        orbitControls.target.set(\r\n                            transforms[my_idx].x,\r\n                            1.4,\r\n                            transforms[my_idx].z\r\n                        )\r\n                        orbitCamera.position.set(\r\n                            -0.1 * Math.sin(transforms[my_idx].r*theta) + orbitCamera.position.x,\r\n                            orbitCamera.position.y,\r\n                            -0.1 * Math.cos(transforms[my_idx].r*theta) + orbitCamera.position.z\r\n                        )\r\n                    }\r\n                    if(e.key == 's'){\t\r\n                        transforms[my_idx].x += 0.1 * Math.sin(transforms[my_idx].r*theta)\r\n                        transforms[my_idx].z += 0.1 * Math.cos(transforms[my_idx].r*theta)\r\n                        orbitControls.target.set(\r\n                            transforms[my_idx].x,\r\n                            1.4,\r\n                            transforms[my_idx].z\r\n                        )\r\n                        orbitCamera.position.set(\r\n                            +0.1 * Math.sin(transforms[my_idx].r*theta) + orbitCamera.position.x,\r\n                            orbitCamera.position.y,\r\n                            +0.1 * Math.cos(transforms[my_idx].r*theta) + orbitCamera.position.z\r\n                        )\r\n                    }\r\n                    if(e.key == 'a'){\r\n                        transforms[my_idx].r += 0.3\r\n                    }\r\n                    if(e.key == 'd'){\t\r\n                        transforms[my_idx].r -= 0.3\r\n                    }\r\n                }\r\n            }) \r\n        }\r\n    }\r\n\r\n\r\n    const rigRotation = (\r\n        idx,\r\n        name,\r\n        rotation = { x: 0, y: 0, z: 0 },\r\n        dampener = 1,\r\n        lerpAmount = 0.3\r\n    ) => {\r\n        let currentVrm = VRMs[idx]\r\n        if (!currentVrm) {return}\r\n        const Part = currentVrm.humanoid.getBoneNode(\r\n            VRMSchema.HumanoidBoneName[name]\r\n        );\r\n        if (!Part) {return}\r\n\r\n        \r\n        let euler = new THREE.Euler(\r\n            rotation.x * dampener,\r\n            rotation.y * dampener,\r\n            rotation.z * dampener\r\n        );\r\n        let quaternion = new THREE.Quaternion().setFromEuler(euler);\r\n        Part.quaternion.slerp(quaternion, lerpAmount); // interpolate\r\n    };\r\n\r\n    // Animate Position Helper Function\r\n    const rigPosition = (\r\n        idx,\r\n        name,\r\n        position = { x: 0, y: 0, z: 0 },\r\n        dampener = 1,\r\n        lerpAmount = 0.3\r\n    ) => {\r\n        let currentVrm = VRMs[idx]\r\n        if (!currentVrm) {return}\r\n        const Part = currentVrm.humanoid.getBoneNode(\r\n        VRMSchema.HumanoidBoneName[name]\r\n        );\r\n        if (!Part) {return}\r\n        let vector = new THREE.Vector3(\r\n            position.x * dampener,\r\n            position.y * dampener,\r\n            position.z * dampener\r\n        );\r\n        Part.position.lerp(vector, lerpAmount); // interpolate\r\n    };\r\n\r\n    const rigFace = (idx, riggedFace) => {\r\n\r\n        let currentVrm = VRMs[idx]\r\n\r\n        // Renaming sime useful functions for easy use.\r\n        const remap = Kalidokit.Utils.remap;\r\n        const clamp = Kalidokit.Utils.clamp;\r\n        const lerp = Kalidokit.Vector.lerp;\r\n\r\n        \r\n\r\n        if(!currentVrm){return}\r\n        rigRotation(idx, \"Neck\", riggedFace.head, 0.7);\r\n    \r\n        // Blendshapes and Preset Name Schema\r\n        const Blendshape = currentVrm.blendShapeProxy;\r\n        const PresetName = VRMSchema.BlendShapePresetName;\r\n      \r\n        // Simple example without winking. Interpolate based on old blendshape, then stabilize blink with `Kalidokit` helper function.\r\n        // for VRM, 1 is closed, 0 is open.\r\n        riggedFace.eye.l = lerp(clamp(1 - riggedFace.eye.l, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\r\n        riggedFace.eye.r = lerp(clamp(1 - riggedFace.eye.r, 0, 1),Blendshape.getValue(PresetName.Blink), .5)\r\n        riggedFace.eye = Kalidokit.Face.stabilizeBlink(riggedFace.eye,riggedFace.head.y)\r\n        Blendshape.setValue(PresetName.Blink, riggedFace.eye.l);\r\n        \r\n        // Interpolate and set mouth blendshapes\r\n        Blendshape.setValue(PresetName.I, lerp(riggedFace.mouth.shape.I,Blendshape.getValue(PresetName.I), .5));\r\n        Blendshape.setValue(PresetName.A, lerp(riggedFace.mouth.shape.A,Blendshape.getValue(PresetName.A), .5));\r\n        Blendshape.setValue(PresetName.E, lerp(riggedFace.mouth.shape.E,Blendshape.getValue(PresetName.E), .5));\r\n        Blendshape.setValue(PresetName.O, lerp(riggedFace.mouth.shape.O,Blendshape.getValue(PresetName.O), .5));\r\n        Blendshape.setValue(PresetName.U, lerp(riggedFace.mouth.shape.U,Blendshape.getValue(PresetName.U), .5));\r\n    \r\n        //PUPILS\r\n        //interpolate pupil and keep a copy of the value\r\n        let lookTarget =\r\n          new THREE.Euler(\r\n            lerp(oldLookTarget.x , riggedFace.pupil.y, .4),\r\n            lerp(oldLookTarget.y, riggedFace.pupil.x, .4),\r\n            0,\r\n            \"XYZ\"\r\n          )\r\n        oldLookTarget.copy(lookTarget)\r\n        currentVrm.lookAt.applyer.lookAt(lookTarget);\r\n    }\r\n\r\n    const onResults = (results) => {\r\n        // Animate model\r\n        if (!VRMs[my_idx]) return;\r\n\r\n        // Take the results from `Holistic` and animate character based on its Face, Pose, and Hand Keypoints.\r\n        let riggedPose, riggedLeftHand, riggedRightHand, riggedFace;\r\n    \r\n        const faceLandmarks = results.faceLandmarks;\r\n        // Pose 3D Landmarks are with respect to Hip distance in meters\r\n        const pose3DLandmarks = results.ea;\r\n        // Pose 2D landmarks are with respect to videoWidth and videoHeight\r\n        const pose2DLandmarks = results.poseLandmarks;\r\n        // Be careful, hand landmarks may be reversed\r\n        const leftHandLandmarks = results.rightHandLandmarks;\r\n        const rightHandLandmarks = results.leftHandLandmarks;\r\n        \r\n\r\n        // Animate Face\r\n        if (faceLandmarks) {\r\n            riggedFace = Kalidokit.Face.solve(faceLandmarks,{\r\n                runtime:\"mediapipe\",\r\n                video:videoElement\r\n            });\r\n        }\r\n\r\n        \r\n        \r\n        // Animate Pose\r\n        if (pose2DLandmarks && pose3DLandmarks) {\r\n            riggedPose = Kalidokit.Pose.solve(pose3DLandmarks, pose2DLandmarks, {\r\n                runtime: \"mediapipe\",\r\n                video:videoElement,\r\n            });\r\n        }\r\n        \r\n            // Animate Hands\r\n        if (leftHandLandmarks) {\r\n            riggedLeftHand = Kalidokit.Hand.solve(leftHandLandmarks, \"Left\");\r\n        }\r\n            \r\n        if (rightHandLandmarks) {\r\n            riggedRightHand = Kalidokit.Hand.solve(rightHandLandmarks, \"Right\");\r\n        }\r\n    \r\n        \r\n        // Socket send data\r\n        let my_data = {\r\n            uid,\r\n\r\n            riggedPose,\r\n            riggedLeftHand,\r\n            riggedRightHand,\r\n            riggedFace,\r\n\r\n            transform:transforms[my_idx]\r\n        }\r\n        \r\n        if(flag) motion_socket.send(JSON.stringify(my_data))\r\n\r\n        // applyMovements( my_data, idx )\r\n    }\r\n\r\n    const applyMovements = ( data, idx ) => {\r\n\r\n        let {\r\n            riggedPose,\r\n            riggedLeftHand,\r\n            riggedRightHand,\r\n            riggedFace,\r\n            transform,\r\n        } = data\r\n\r\n\r\n        try{\r\n\r\n            // console.log(riggedFace)\r\n            rigFace(idx, riggedFace)\r\n        }catch{}\r\n\r\n        try{\r\n            \r\n            rigRotation(idx, \"Hips\", {...riggedPose.Hips.rotation, y: riggedPose.Hips.rotation.y + transform.r}, 0.7);\r\n            rigPosition(\r\n                \"Hips\",\r\n                {\r\n                    x: riggedPose.Hips.position.x,// Reverse direction\r\n                    y: riggedPose.Hips.position.y + 1, // Add a bit of height\r\n                    z: -riggedPose.Hips.position.z // Reverse direction\r\n                },\r\n                1,\r\n                0.07\r\n            );\r\n        \r\n            rigRotation(idx, \"Chest\", riggedPose.Spine, 0.25, .3);\r\n            rigRotation(idx, \"Spine\", riggedPose.Spine, 0.45, .3);\r\n        \r\n            rigRotation(idx, \"RightUpperArm\", riggedPose.RightUpperArm, 1, .3);\r\n            rigRotation(idx, \"RightLowerArm\", riggedPose.RightLowerArm, 1, .3);\r\n            rigRotation(idx, \"LeftUpperArm\", riggedPose.LeftUpperArm, 1, .3);\r\n            rigRotation(idx, \"LeftLowerArm\", riggedPose.LeftLowerArm, 1, .3);\r\n        \r\n            rigRotation(idx, \"LeftUpperLeg\", riggedPose.LeftUpperLeg, 1, .3);\r\n            rigRotation(idx, \"LeftLowerLeg\", riggedPose.LeftLowerLeg, 1, .3);\r\n            rigRotation(idx, \"RightUpperLeg\", riggedPose.RightUpperLeg, 1, .3);\r\n            rigRotation(idx, \"RightLowerLeg\", riggedPose.RightLowerLeg, 1, .3);\r\n        }catch{}\r\n\r\n\r\n        try{\r\n            rigRotation(idx, \"LeftHand\", {\r\n                // Combine pose rotation Z and hand rotation X Y\r\n                z: riggedPose.LeftHand.z,\r\n                y: riggedLeftHand.LeftWrist.y,\r\n                x: riggedLeftHand.LeftWrist.x\r\n            });\r\n            rigRotation(idx, \"LeftRingProximal\", riggedLeftHand.LeftRingProximal);\r\n            rigRotation(idx, \"LeftRingIntermediate\", riggedLeftHand.LeftRingIntermediate);\r\n            rigRotation(idx, \"LeftRingDistal\", riggedLeftHand.LeftRingDistal);\r\n            rigRotation(idx, \"LeftIndexProximal\", riggedLeftHand.LeftIndexProximal);\r\n            rigRotation(idx, \"LeftIndexIntermediate\", riggedLeftHand.LeftIndexIntermediate);\r\n            rigRotation(idx, \"LeftIndexDistal\", riggedLeftHand.LeftIndexDistal);\r\n            rigRotation(idx, \"LeftMiddleProximal\", riggedLeftHand.LeftMiddleProximal);\r\n            rigRotation(idx, \"LeftMiddleIntermediate\", riggedLeftHand.LeftMiddleIntermediate);\r\n            rigRotation(idx, \"LeftMiddleDistal\", riggedLeftHand.LeftMiddleDistal);\r\n            rigRotation(idx, \"LeftThumbProximal\", riggedLeftHand.LeftThumbProximal);\r\n            rigRotation(idx, \"LeftThumbIntermediate\", riggedLeftHand.LeftThumbIntermediate);\r\n            rigRotation(idx, \"LeftThumbDistal\", riggedLeftHand.LeftThumbDistal);\r\n            rigRotation(idx, \"LeftLittleProximal\", riggedLeftHand.LeftLittleProximal);\r\n            rigRotation(idx, \"LeftLittleIntermediate\", riggedLeftHand.LeftLittleIntermediate);\r\n            rigRotation(idx, \"LeftLittleDistal\", riggedLeftHand.LeftLittleDistal);\r\n        }catch{}\r\n\r\n        try{\r\n            rigRotation(idx, \"RightHand\", {\r\n                // Combine Z axis from pose hand and X/Y axis from hand wrist rotation\r\n                z: riggedPose.RightHand.z,\r\n                y: riggedRightHand.RightWrist.y,\r\n                x: riggedRightHand.RightWrist.x\r\n            });\r\n            rigRotation(idx, \"RightRingProximal\", riggedRightHand.RightRingProximal);\r\n            rigRotation(idx, \"RightRingIntermediate\", riggedRightHand.RightRingIntermediate);\r\n            rigRotation(idx, \"RightRingDistal\", riggedRightHand.RightRingDistal);\r\n            rigRotation(idx, \"RightIndexProximal\", riggedRightHand.RightIndexProximal);\r\n            rigRotation(idx, \"RightIndexIntermediate\",riggedRightHand.RightIndexIntermediate);\r\n            rigRotation(idx, \"RightIndexDistal\", riggedRightHand.RightIndexDistal);\r\n            rigRotation(idx, \"RightMiddleProximal\", riggedRightHand.RightMiddleProximal);\r\n            rigRotation(idx, \"RightMiddleIntermediate\", riggedRightHand.RightMiddleIntermediate);\r\n            rigRotation(idx, \"RightMiddleDistal\", riggedRightHand.RightMiddleDistal);\r\n            rigRotation(idx, \"RightThumbProximal\", riggedRightHand.RightThumbProximal);\r\n            rigRotation(idx, \"RightThumbIntermediate\", riggedRightHand.RightThumbIntermediate);\r\n            rigRotation(idx, \"RightThumbDistal\", riggedRightHand.RightThumbDistal);\r\n            rigRotation(idx, \"RightLittleProximal\", riggedRightHand.RightLittleProximal);\r\n            rigRotation(idx, \"RightLittleIntermediate\", riggedRightHand.RightLittleIntermediate);\r\n            rigRotation(idx, \"RightLittleDistal\", riggedRightHand.RightLittleDistal);\r\n        }catch{}\r\n\r\n\r\n        \r\n\r\n        // remove the location of avatar\r\n        VRMs[idx].scene.position.x = transform.x\r\n        VRMs[idx].scene.position.z = transform.z\r\n    }\r\n\r\n\r\n\r\n    /* Animation Related Functions */\r\n    function animate() {\r\n        requestAnimationFrame(animate);\r\n      \r\n        VRMs.forEach(vrm=>{\r\n            if (vrm) {\r\n            // Update model to render physics\r\n            vrm.update(clock.getDelta());\r\n            }\r\n        })\r\n\r\n        renderer.render(scene, orbitCamera);\r\n    }\r\n\r\n    /* Network (Socket) */\r\n\r\n    const initSocket = () => {\r\n        // get room_name from URL Params\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const roomName = urlParams.get('roomname');\r\n        const wss_protocol = (window.location.protocol == 'https:') ? 'wss://': 'ws://';\r\n        motion_socket = new WebSocket(\r\n            wss_protocol + window.location.host + '/ws/motion/'  + roomName + '/'\r\n        );\r\n        // Triggered when connect webchat_socket\r\n        motion_socket.onopen = function(e) {\r\n            // Do nothing\r\n            flag = true;\r\n        }\r\n\r\n        // Trigger when receive the data from backend\r\n        motion_socket.onmessage = function(e) {\r\n            const data = JSON.parse(e.data);\r\n            let {uid:_uid} = data;\r\n            let idx = uids.indexOf(_uid)\r\n            if(idx>=0){\r\n                applyMovements(data, idx)\r\n            }else{\r\n                if(!(uids_loading.indexOf(_uid)>=0)){\r\n                    // receive an unknown sign\r\n                    console.log(\"cannot found uid\", _uid, uids_loading)\r\n                    loadVRM(_uid)\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n\r\n\r\n    /* Lifecycle Hooks */\r\n\r\n    // Init HTML element reference and some mudules\r\n    React.useEffect(()=>{\r\n        getUid()\r\n        newVideoElement()\r\n        newHolistic()\r\n        newScene()\r\n        initRenderingPipeline()\r\n    },[])\r\n\r\n    // When videoElement is found, new \"@mediapipe/camera_utils\".Camera\r\n    React.useEffect(()=>{\r\n        if(videoElement) newCamera()\r\n    },[videoElement])\r\n\r\n    // When Camera is Ready, start it.\r\n    React.useEffect(()=>{\r\n        if(camera) camera.start();\r\n    },[camera])\r\n\r\n\r\n    React.useEffect(()=>{\r\n        if(scene){\r\n            newLight()\r\n            loadFBX()\r\n            loadBase()\r\n            loadSky()\r\n            animate()\r\n            loadVRM(uid);  \r\n            initSocket()  \r\n            // var axisHelper = new THREE.AxisHelper(250);\r\n            // scene.add(axisHelper);\r\n            }\r\n    },[scene])\r\n\r\n    // React.useEffect(()=>{\r\n    //     setInterval(() => {\r\n    //         // console.log(\"position\",orbitCamera.position)\r\n    //         console.log(\"target\",orbitControls.target)\r\n    //         console.log(\"transforms\",transforms[my_idx])\r\n    //     }, 500);\r\n    // },[])\r\n\r\n    React.useEffect(()=>{\r\n        if(holistic) initHolistic()\r\n    },[holistic])\r\n\r\n    return(\r\n        <div className='ChatRoom'>\r\n            <video\r\n                className=\"input_video\" width=\"300px\" height=\"200px\"  autoPlay muted\r\n                style={{\r\n                    position:\"absolute\",\r\n                    left:8,bottom:20,\r\n                }}\r\n            ></video>  \r\n\r\n            <button className=\"quit_button\" style={{ position:\"absolute\", right:30,top:30,}} \r\n                onClick={()=>{window.location.href=\"/chatrooms\"}}>\r\n                <ImportOutlined />\r\n            </button>\r\n\r\n            <button className=\"shop_button\" style={{ position:\"absolute\", right:30,top:30,}} \r\n            onClick={()=>{window.location.href=\"/shop\"}}>\r\n                <ShoppingCartOutlined />\r\n            </button>\r\n\r\n\r\n            <ChatBar />     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Login\\cookie.js",["63"],"export function setCookie(name,value)\r\n{\r\n    var Days = 30;\r\n    var exp = new Date();\r\n    exp.setTime(exp.getTime() + Days*24*60*60*1000);\r\n    document.cookie = name + \"=\"+ escape (value) + \";path=/;expires=\" + exp.toGMTString();\r\n}\r\n\r\nexport function getCookie(name)\r\n{\r\n    var arr,reg=new RegExp(\"(^| )\"+name+\"=([^;]*)(;|$)\");\r\n \r\n    if(arr=document.cookie.match(reg))\r\n \r\n        return unescape(arr[2]);\r\n    else\r\n        return null;\r\n}\r\n\r\nexport function delCookie(name)\r\n{\r\n    var exp = new Date();\r\n    exp.setTime(exp.getTime() - 1);\r\n    var cval=getCookie(name);\r\n    if(cval!=null)\r\n        document.cookie= name + \"=\"+cval+\";path=/;expires=\"+exp.toGMTString();\r\n}","C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\ChatRoom\\ChatBar.js",["64","65","66","67"],"C:\\Users\\123\\Documents\\GitHub\\chatverse\\frontend\\src\\app\\components\\Shop\\Shop.js",["68","69","70","71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":51,"column":39,"nodeType":"83","messageId":"84","endLine":51,"endColumn":49},{"ruleId":"77","severity":1,"message":"85","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":19},{"ruleId":"77","severity":1,"message":"86","line":12,"column":10,"nodeType":"79","messageId":"80","endLine":12,"endColumn":15},{"ruleId":"77","severity":1,"message":"87","line":12,"column":17,"nodeType":"79","messageId":"80","endLine":12,"endColumn":25},{"ruleId":"77","severity":1,"message":"88","line":14,"column":10,"nodeType":"79","messageId":"80","endLine":14,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":279,"column":25,"nodeType":"79","messageId":"91","endLine":279,"endColumn":26},{"ruleId":"92","severity":1,"message":"93","line":280,"column":30,"nodeType":"94","messageId":"84","endLine":280,"endColumn":32},{"ruleId":"92","severity":1,"message":"93","line":294,"column":30,"nodeType":"94","messageId":"84","endLine":294,"endColumn":32},{"ruleId":"92","severity":1,"message":"93","line":308,"column":30,"nodeType":"94","messageId":"84","endLine":308,"endColumn":32},{"ruleId":"92","severity":1,"message":"93","line":311,"column":30,"nodeType":"94","messageId":"84","endLine":311,"endColumn":32},{"ruleId":"77","severity":1,"message":"95","line":371,"column":15,"nodeType":"79","messageId":"80","endLine":371,"endColumn":20},{"ruleId":"92","severity":1,"message":"93","line":598,"column":56,"nodeType":"94","messageId":"84","endLine":598,"endColumn":58},{"ruleId":"96","severity":1,"message":"97","line":643,"column":7,"nodeType":"98","endLine":643,"endColumn":21,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":663,"column":7,"nodeType":"98","endLine":663,"endColumn":14,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"102","line":675,"column":7,"nodeType":"98","endLine":675,"endColumn":17,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":13,"column":8,"nodeType":"106","messageId":"107","endLine":13,"endColumn":38},{"ruleId":"77","severity":1,"message":"108","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"92","severity":1,"message":"93","line":23,"column":56,"nodeType":"94","messageId":"84","endLine":23,"endColumn":58},{"ruleId":"77","severity":1,"message":"109","line":78,"column":11,"nodeType":"79","messageId":"80","endLine":78,"endColumn":25},{"ruleId":"96","severity":1,"message":"110","line":89,"column":7,"nodeType":"98","endLine":89,"endColumn":9,"suggestions":"111"},{"ruleId":"77","severity":1,"message":"112","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":22},{"ruleId":"77","severity":1,"message":"113","line":2,"column":10,"nodeType":"79","messageId":"80","endLine":2,"endColumn":22},{"ruleId":"77","severity":1,"message":"114","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":16,"column":8,"nodeType":"106","messageId":"107","endLine":16,"endColumn":38},{"ruleId":"96","severity":1,"message":"115","line":219,"column":7,"nodeType":"98","endLine":219,"endColumn":12,"suggestions":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'fontFamily'.","ObjectExpression","unexpected","'getCookie' is defined but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'PoweroffOutlined' is defined but never used.","no-redeclare","'e' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'remap' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'newCamera'. Either include it or remove the dependency array.","ArrayExpression",["119"],"React Hook React.useEffect has missing dependencies: 'animate', 'initSocket', 'loadBase', 'loadFBX', 'loadSky', 'loadVRM', and 'newLight'. Either include them or remove the dependency array.",["120"],"React Hook React.useEffect has a missing dependency: 'initHolistic'. Either include it or remove the dependency array.",["121"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useEffect' is defined but never used.","'handleEnterKey' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'initSocket'. Either include it or remove the dependency array.",["122"],"'UserOutlined' is defined but never used.","'RestOutlined' is defined but never used.","'SendOutlined' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getUsingAvatar'. Either include it or remove the dependency array.",["123"],"no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [newCamera, videoElement]",{"range":"134","text":"135"},"Update the dependencies array to be: [animate, initSocket, loadBase, loadFBX, loadSky, loadVRM, newLight, scene]",{"range":"136","text":"137"},"Update the dependencies array to be: [holistic, initHolistic]",{"range":"138","text":"139"},"Update the dependencies array to be: [initSocket]",{"range":"140","text":"141"},"Update the dependencies array to be: [getUsingAvatar, uid]",{"range":"142","text":"143"},[24175,24189],"[newCamera, videoElement]",[24659,24666],"[animate, initSocket, loadBase, loadFBX, loadSky, loadVRM, newLight, scene]",[25024,25034],"[holistic, initHolistic]",[2667,2669],"[initSocket]",[7635,7640],"[getUsingAvatar, uid]"]